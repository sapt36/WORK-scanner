1 PREP #include<> 

2 PREP #include<> 


4 REWD int 
4 IDEN main                                              l  
4 SPEC ( 
4 REWD int 
4 IDEN argc                                              l  
4 OPER , 
4 REWD char 
4 OPER * 
4 IDEN argv                                              l  
4 OPER [ 
4 OPER ] 
4 SPEC ) 
4 SPEC { 

5 REWD char 
5 IDEN stringIn                                          l  
5 OPER [ 
5 INTE 255                                               l  
5 OPER ] 
5 OPER = 
5 SPEC { 
5 SPEC } 
5 SPEC ; 

6 REWD char 
6 IDEN stringArray                                       l  
6 OPER [ 
6 INTE 50                                                l  
6 OPER ] 
6 OPER = 
6 STR                                                     
6 SPEC ; 

7 REWD char 
7 IDEN stringArray                                       l  
7 INTE 2                                                 l  
7 OPER [ 
7 INTE 50                                                l  
7 OPER ] 
7 OPER = 
7 STR                                                     
7 SPEC ; 

8 REWD int 
8 IDEN lineNo                                            l  
8 OPER = 
8 INTE 1                                                 l  
8 SPEC ; 

9 REWD int 
9 IDEN chCheck                                           l  
9 OPER = 
9 INTE 0                                                 l  
9 SPEC ; 

10 REWD int 
10 IDEN MCflag                                            l  
10 OPER = 
10 INTE 0                                                 l  
10 SPEC ; 

11 REWD int 
11 IDEN stringCheck                                       l  
11 OPER = 
11 INTE 0                                                 l  
11 SPEC ; 

12 IDEN FILE                                              l  
12 OPER * 
12 IDEN In                                                l  
12 SPEC ; 

13 IDEN FILE                                              l  
13 OPER * 
13 IDEN Out                                               l  
13 SPEC ; 

14 IDEN In                                                l  
14 OPER = 
14 IDEN fopen                                             l  
14 SPEC ( 
14 STR scanner.c                                           
14 OPER , 
14 STR scanner.cr                                          
14 SPEC ) 
14 SPEC ; 

15 IDEN Out                                               l  
15 OPER = 
15 IDEN fopen                                             l  
15 SPEC ( 
15 STR scannerOut.txt                                      
15 OPER , 
15 STR scannerOut.txtw                                     
15 SPEC ) 
15 SPEC ; 

16 REWD if 
16 SPEC ( 
16 IDEN In                                                l  
16 OPER = 
16 OPER = 
16 IDEN NULL                                              l  
16 SPEC ) 
16 SPEC { 

17 IDEN printf                                            l  
17 SPEC ( 
17 STR Fail to read file!\n                                
17 SPEC ) 
17 SPEC ; 

18 IDEN return                                            l  
18 INTE 0                                                 l  
18 SPEC ; 

19 SPEC } 

20 REWD while 
20 SPEC ( 
20 IDEN fgets                                             l  
20 SPEC ( 
20 IDEN stringIn                                          l  
20 OPER , 
20 INTE 255                                               l  
20 OPER , 
20 IDEN In                                                l  
20 SPEC ) 
20 OPER ! 
20 OPER = 
20 IDEN NULL                                              l  
20 SPEC ) 
20 SPEC { 

21 REWD int 
21 IDEN x                                                 l  
21 OPER = 
21 INTE 0                                                 l  
21 SPEC ; 

22 REWD int 
22 IDEN y                                                 l  
22 OPER = 
22 INTE 0                                                 l  
22 SPEC ; 

23 REWD while 
23 SPEC ( 
23 IDEN stringIn                                          l  
23 OPER [ 
23 IDEN x                                                 l  
23 OPER ] 
23 OPER ! 
23 OPER = 
23 CHAR n  
23 SPEC ) 
23 SPEC { 


25 SC // 

26 REWD if 
26 SPEC ( 
26 IDEN stringIn                                          l  
26 OPER [ 
26 IDEN x                                                 l  
26 OPER ] 
26 OPER = 
26 OPER = 
26 CHAR #  
26 SPEC ) 
26 SPEC { 

27 IDEN fprintf                                           l  
27 SPEC ( 
27 IDEN Out                                               l  
27 OPER , 
27 STR %d                                                  
27 OPER , 
27 IDEN    lineNo                                         l  
27 SPEC ) 
27 SPEC ; 

28 IDEN fprintf                                           l  
28 SPEC ( 
28 IDEN Out                                               l  
28 OPER , 
28 STR PREP                                                
28 SPEC ) 
28 SPEC ; 

29 IDEN fgets                                             l  
29 SPEC ( 
29 IDEN stringIn                                          l  
29 OPER , 
29 INTE 255                                               l  
29 OPER , 
29 IDEN In                                                l  
29 SPEC ) 
29 SPEC ; 

30 IDEN lineNo                                            l  
30 OPER + 
30 OPER + 
30 SPEC ; 

31 IDEN x                                                 l  
31 OPER = 
31 OPER - 
31 INTE 1                                                 l  
31 SPEC ; 

32 IDEN fprintf                                           l  
32 SPEC ( 
32 IDEN Out                                               l  
32 OPER , 
32 STR #include<> \n                                       
32 SPEC ) 
32 SPEC ; 

33 IDEN fprintf                                           l  
33 SPEC ( 
33 IDEN Out                                               l  
33 OPER , 
33 STR \n                                                  
33 SPEC ) 
33 SPEC ; 

34 SPEC } 

35 SC // 

36 REWD if 
36 SPEC ( 
36 IDEN stringIn                                          l  
36 OPER [ 
36 IDEN x                                                 l  
36 OPER ] 
36 OPER = 
36 OPER = 
36 CHAR '  
36 SPEC ) 
36 SPEC { 

37 IDEN chCheck                                           l  
37 OPER + 
37 OPER + 
37 SPEC ; 

38 IDEN x                                                 l  
38 OPER + 
38 OPER + 
38 SPEC ; 


40 REWD if 
40 SPEC ( 
40 IDEN chCheck                                           l  
40 OPER 
40 INTE 2                                                 l  
40 OPER ! 
40 OPER = 
40 INTE 0                                                 l  
40 OPER & 
40 OPER & 
40 IDEN stringIn                                          l  
40 OPER [ 
40 IDEN x                                                 l  
40 OPER ] 
40 OPER ! 
40 OPER = 
40 CHAR \  
40 SPEC ) 
40 SPEC { 

41 IDEN fprintf                                           l  
41 SPEC ( 
41 IDEN Out                                               l  
41 OPER , 
41 STR %d                                                  
41 OPER , 
41 IDEN    lineNo                                         l  
41 SPEC ) 
41 SPEC ; 

42 IDEN fprintf                                           l  
42 SPEC ( 
42 IDEN Out                                               l  
42 OPER , 
42 STR CHAR                                                
42 SPEC ) 
42 SPEC ; 

43 IDEN fprintf                                           l  
43 SPEC ( 
43 IDEN Out                                               l  
43 OPER , 
43 STR %c  \n                                              
43 OPER , 
43 IDEN       stringIn                                    l  
43 OPER [ 
43 IDEN x                                                 l  
43 OPER ] 
43 SPEC ) 
43 SPEC ; 

44 IDEN x                                                 l  
44 OPER + 
44 OPER + 
44 SPEC ; 

45 SPEC } 

46 REWD else 
46 REWD if 
46 SPEC ( 
46 IDEN stringIn                                          l  
46 OPER [ 
46 IDEN x                                                 l  
46 OPER ] 
46 OPER = 
46 OPER = 
46 CHAR \  
46 SPEC ) 
46 SPEC { 

47 IDEN x                                                 l  
47 OPER + 
47 OPER + 
47 SPEC ; 

48 IDEN fprintf                                           l  
48 SPEC ( 
48 IDEN Out                                               l  
48 OPER , 
48 STR %d                                                  
48 OPER , 
48 IDEN    lineNo                                         l  
48 SPEC ) 
48 SPEC ; 

49 IDEN fprintf                                           l  
49 SPEC ( 
49 IDEN Out                                               l  
49 OPER , 
49 STR CHAR                                                
49 SPEC ) 
49 SPEC ; 

50 IDEN fprintf                                           l  
50 SPEC ( 
50 IDEN Out                                               l  
50 OPER , 
50 STR %c  \n                                              
50 OPER , 
50 IDEN       stringIn                                    l  
50 OPER [ 
50 IDEN x                                                 l  
50 OPER ] 
50 SPEC ) 
50 SPEC ; 

51 IDEN x                                                 l  
51 OPER + 
51 OPER + 
51 SPEC ; 

52 SPEC } 

53 IDEN continue                                          l  
53 SPEC ; 

54 SPEC } 

55 SC // 

56 REWD if 
56 SPEC ( 
56 IDEN stringIn                                          l  
56 OPER [ 
56 IDEN x                                                 l  
56 OPER ] 
56 OPER = 
56 OPER = 
56 CHAR "  
56 SPEC ) 
56 SPEC { 

57 IDEN x                                                 l  
57 OPER + 
57 OPER + 
57 SPEC ; 


59 REWD while 
59 SPEC ( 
59 IDEN stringIn                                          l  
59 OPER [ 
59 IDEN x                                                 l  
59 OPER ] 
59 OPER ! 
59 OPER = 
59 CHAR "  
59 SPEC ) 
59 SPEC { 

60 IDEN stringArray                                       l  
60 INTE 2                                                 l  
60 OPER [ 
60 IDEN y                                                 l  
60 OPER ] 
60 OPER = 
60 IDEN stringIn                                          l  
60 OPER [ 
60 IDEN x                                                 l  
60 OPER ] 
60 SPEC ; 

61 IDEN y                                                 l  
61 OPER + 
61 OPER + 
61 SPEC ; 

62 IDEN x                                                 l  
62 OPER + 
62 OPER + 
62 SPEC ; 

63 SPEC } 


65 IDEN fprintf                                           l  
65 SPEC ( 
65 IDEN Out                                               l  
65 OPER , 
65 STR %d                                                  
65 OPER , 
65 IDEN    lineNo                                         l  
65 SPEC ) 
65 SPEC ; 

66 IDEN fprintf                                           l  
66 SPEC ( 
66 IDEN Out                                               l  
66 OPER , 
66 STR STR                                                 
66 SPEC ) 
66 SPEC ; 

67 IDEN fprintf                                           l  
67 SPEC ( 
67 IDEN Out                                               l  
67 OPER , 
67 STR %s  \n                                              
67 OPER , 
67 IDEN       stringArray                                 l  
67 INTE 2                                                 l  
67 SPEC ) 
67 SPEC ; 

68 IDEN x                                                 l  
68 OPER + 
68 OPER + 
68 SPEC ; 

69 IDEN continue                                          l  
69 SPEC ; 

70 SPEC } 

71 REWD switch 
71 IDEN swh                                               l  
71 IDEN swhh                                              l  
71 SPEC ( 
71 IDEN stringIn                                          l  
71 OPER [ 
71 IDEN x                                                 l  
71 OPER ] 
71 SPEC ) 
71 SPEC { 

72 REWD case 
72 CHAR /  
72 SPEC : 

73 IDEN x                                                 l  
73 OPER + 
73 OPER + 
73 SPEC ; 

74 REWD if 
74 SPEC ( 
74 IDEN stringIn                                          l  
74 OPER [ 
74 IDEN x                                                 l  
74 OPER ] 
74 OPER = 
74 OPER = 
74 CHAR /  
74 SPEC ) 
74 SPEC { 

75 IDEN fprintf                                           l  
75 SPEC ( 
75 IDEN Out                                               l  
75 OPER , 
75 STR %d                                                  
75 OPER , 
75 IDEN    lineNo                                         l  
75 SPEC ) 
75 SPEC ; 

76 IDEN fprintf                                           l  
76 SPEC ( 
76 IDEN Out                                               l  
76 OPER , 
76 STR SC                                                  
76 SPEC ) 
76 SPEC ; 

77 IDEN fgets                                             l  
77 SPEC ( 
77 IDEN stringIn                                          l  
77 OPER , 
77 INTE 255                                               l  
77 OPER , 
77 IDEN In                                                l  
77 SPEC ) 
77 SPEC ; 

78 IDEN lineNo                                            l  
78 OPER + 
78 OPER + 
78 SPEC ; 

79 IDEN x                                                 l  
79 OPER = 
79 OPER - 
79 INTE 1                                                 l  
79 SPEC ; 

80 IDEN fprintf                                           l  
80 SPEC ( 
80 IDEN Out                                               l  
80 OPER , 
80 STR // \n                                               
80 SPEC ) 
80 SPEC ; 

81 IDEN fprintf                                           l  
81 SPEC ( 
81 IDEN Out                                               l  
81 OPER , 
81 STR \n                                                  
81 SPEC ) 
81 SPEC ; 

82 SPEC } 

83 MC /* */ 

84 IDEN For                                               l  
84 IDEN MC                                                l  
84 OPER * 
84 MC /* */ 

85 REWD else 
85 REWD if 
85 SPEC ( 
85 IDEN stringIn                                          l  
85 OPER [ 
85 IDEN x                                                 l  
85 OPER ] 
85 OPER = 
85 OPER = 
85 CHAR *  
85 OPER | 
85 OPER | 
85 IDEN MCflag                                            l  
85 OPER = 
85 OPER = 
85 INTE 1                                                 l  
85 SPEC ) 
85 SPEC { 

86 IDEN fprintf                                           l  
86 SPEC ( 
86 IDEN Out                                               l  
86 OPER , 
86 STR %d                                                  
86 OPER , 
86 IDEN    lineNo                                         l  
86 SPEC ) 
86 SPEC ; 

87 IDEN fprintf                                           l  
87 SPEC ( 
87 IDEN Out                                               l  
87 OPER , 
87 STR MC                                                  
87 SPEC ) 
87 SPEC ; 

88 IDEN MCflag                                            l  
88 OPER = 
88 INTE 1                                                 l  
88 SPEC ; 

89 IDEN fgets                                             l  
89 SPEC ( 
89 IDEN stringIn                                          l  
89 OPER , 
89 INTE 255                                               l  
89 OPER , 
89 IDEN In                                                l  
89 SPEC ) 
89 SPEC ; 

90 IDEN lineNo                                            l  
90 OPER + 
90 OPER + 
90 SPEC ; 

91 IDEN x                                                 l  
91 OPER = 
91 OPER - 
91 INTE 1                                                 l  
91 SPEC ; 

92 REWD if 
92 SPEC ( 
92 IDEN stringIn                                          l  
92 OPER [ 
92 IDEN x                                                 l  
92 OPER ] 
92 OPER = 
92 OPER = 
92 CHAR /  
92 SPEC ) 
92 SPEC { 

93 IDEN MCflag                                            l  
93 OPER = 
93 INTE 0                                                 l  
93 SPEC ; 

94 SPEC } 

95 IDEN fprintf                                           l  
95 SPEC ( 
95 IDEN Out                                               l  
95 OPER , 
95 STR /* */ \n                                            
95 SPEC ) 
95 SPEC ; 

96 IDEN fprintf                                           l  
96 SPEC ( 
96 IDEN Out                                               l  
96 OPER , 
96 STR \n                                                  
96 SPEC ) 
96 SPEC ; 

97 SPEC } 


99 REWD else 
99 SPEC { 

100 IDEN fprintf                                           l  
100 SPEC ( 
100 IDEN Out                                               l  
100 OPER , 
100 STR %d                                                  
100 OPER , 
100 IDEN    lineNo                                         l  
100 SPEC ) 
100 SPEC ; 

101 IDEN fprintf                                           l  
101 SPEC ( 
101 IDEN Out                                               l  
101 OPER , 
101 STR OPER                                                
101 SPEC ) 
101 SPEC ; 

102 IDEN fprintf                                           l  
102 SPEC ( 
102 IDEN Out                                               l  
102 OPER , 
102 STR / \n                                                
102 SPEC ) 
102 SPEC ; 

103 IDEN x                                                 l  
103 OPER - 
103 OPER - 
103 SPEC ; 

104 SPEC } 

105 IDEN break                                             l  
105 SPEC ; 

106 REWD case 
106 CHAR e  
106 SPEC : 

107 IDEN stringArray                                       l  
107 OPER [ 
107 IDEN y                                                 l  
107 OPER ] 
107 OPER = 
107 IDEN stringIn                                          l  
107 OPER [ 
107 IDEN x                                                 l  
107 OPER ] 
107 SPEC ; 

108 IDEN x                                                 l  
108 OPER + 
108 OPER + 
108 SPEC ; 

109 IDEN y                                                 l  
109 OPER + 
109 OPER + 
109 SPEC ; 

110 REWD switch 
110 IDEN swh                                               l  
110 IDEN swhh                                              l  
110 SPEC ( 
110 IDEN stringIn                                          l  
110 OPER [ 
110 IDEN x                                                 l  
110 OPER ] 
110 SPEC ) 
110 SPEC { 

111 REWD case 
111 CHAR l  
111 SPEC : 

112 IDEN stringArray                                       l  
112 OPER [ 
112 IDEN y                                                 l  
112 OPER ] 
112 OPER = 
112 IDEN stringIn                                          l  
112 OPER [ 
112 IDEN x                                                 l  
112 OPER ] 
112 SPEC ; 

113 IDEN x                                                 l  
113 OPER + 
113 OPER + 
113 SPEC ; 

114 IDEN y                                                 l  
114 OPER + 
114 OPER + 
114 SPEC ; 

115 REWD if 
115 SPEC ( 
115 SPEC ( 
115 IDEN stringIn                                          l  
115 OPER [ 
115 IDEN x                                                 l  
115 OPER ] 
115 OPER = 
115 OPER = 
115 CHAR s  
115 SPEC ) 
115 OPER & 
115 OPER & 
115 SPEC ( 
115 IDEN stringIn                                          l  
115 OPER [ 
115 IDEN x                                                 l  
115 OPER + 
115 INTE 1                                                 l  
115 OPER ] 
115 OPER = 
115 OPER = 
115 CHAR e  
115 SPEC ) 
115 SPEC ) 
115 SPEC { 

116 IDEN x                                                 l  
116 OPER + 
116 OPER + 
116 SPEC ; 

117 IDEN fprintf                                           l  
117 SPEC ( 
117 IDEN Out                                               l  
117 OPER , 
117 STR %d                                                  
117 OPER , 
117 IDEN    lineNo                                         l  
117 SPEC ) 
117 SPEC ; 

118 IDEN fprintf                                           l  
118 SPEC ( 
118 IDEN Out                                               l  
118 OPER , 
118 STR REWD                                                
118 SPEC ) 
118 SPEC ; 

119 IDEN fprintf                                           l  
119 SPEC ( 
119 IDEN Out                                               l  
119 OPER , 
119 STR else \n                                             
119 SPEC ) 
119 SPEC ; 

120 SPEC } 

121 REWD else 
121 SPEC { 

122 REWD while 
122 SPEC ( 
122 SPEC ( 
122 IDEN stringIn                                          l  
122 OPER [ 
122 IDEN x                                                 l  
122 OPER ] 
122 OPER > 
122 OPER = 
122 CHAR A  
122 OPER & 
122 OPER & 
122 IDEN stringIn                                          l  
122 OPER [ 
122 IDEN x                                                 l  
122 OPER ] 
122 OPER < 
122 OPER = 
122 CHAR Z  
122 SPEC ) 
122 OPER | 
122 OPER | 
122 SPEC ( 
122 IDEN stringIn                                          l  
122 OPER [ 
122 IDEN x                                                 l  
122 OPER ] 
122 OPER = 
122 OPER = 
122 CHAR _  
122 SPEC ) 
122 OPER | 
122 OPER | 
122 SPEC ( 
122 IDEN stringIn                                          l  
122 OPER [ 
122 IDEN x                                                 l  
122 OPER ] 
122 OPER > 
122 OPER = 
122 CHAR a  
122 OPER & 
122 OPER & 
122 IDEN stringIn                                          l  
122 OPER [ 
122 IDEN x                                                 l  
122 OPER ] 
122 OPER < 
122 OPER = 
122 CHAR z  
122 SPEC ) 
122 SPEC ) 
122 SPEC { 

123 IDEN stringArray                                       l  
123 OPER [ 
123 IDEN y                                                 l  
123 OPER ] 
123 OPER = 
123 IDEN stringIn                                          l  
123 OPER [ 
123 IDEN x                                                 l  
123 OPER ] 
123 SPEC ; 

124 IDEN y                                                 l  
124 OPER + 
124 OPER + 
124 SPEC ; 

125 IDEN x                                                 l  
125 OPER + 
125 OPER + 
125 SPEC ; 

126 SPEC } 

127 IDEN x                                                 l  
127 OPER - 
127 OPER - 
127 SPEC ; 

128 IDEN fprintf                                           l  
128 SPEC ( 
128 IDEN Out                                               l  
128 OPER , 
128 STR %d                                                  
128 OPER , 
128 IDEN    lineNo                                         l  
128 SPEC ) 
128 SPEC ; 

129 IDEN fprintf                                           l  
129 SPEC ( 
129 IDEN Out                                               l  
129 OPER , 
129 STR IDEN                                                
129 SPEC ) 
129 SPEC ; 

130 IDEN fprintf                                           l  
130 SPEC ( 
130 IDEN Out                                               l  
130 OPER , 
130 STR %s  \n                                              
130 OPER , 
130 IDEN       stringArray                                 l  
130 SPEC ) 
130 SPEC ; 

131 SPEC } 

132 IDEN break                                             l  
132 SPEC ; 

133 IDEN default                                           l  
133 SPEC : 

134 REWD while 
134 SPEC ( 
134 SPEC ( 
134 IDEN stringIn                                          l  
134 OPER [ 
134 IDEN x                                                 l  
134 OPER ] 
134 OPER > 
134 OPER = 
134 CHAR A  
134 OPER & 
134 OPER & 
134 IDEN stringIn                                          l  
134 OPER [ 
134 IDEN x                                                 l  
134 OPER ] 
134 OPER < 
134 OPER = 
134 CHAR Z  
134 SPEC ) 
134 OPER | 
134 OPER | 
134 SPEC ( 
134 IDEN stringIn                                          l  
134 OPER [ 
134 IDEN x                                                 l  
134 OPER ] 
134 OPER = 
134 OPER = 
134 CHAR _  
134 SPEC ) 
134 OPER | 
134 OPER | 
134 SPEC ( 
134 IDEN stringIn                                          l  
134 OPER [ 
134 IDEN x                                                 l  
134 OPER ] 
134 OPER > 
134 OPER = 
134 CHAR a  
134 OPER & 
134 OPER & 
134 IDEN stringIn                                          l  
134 OPER [ 
134 IDEN x                                                 l  
134 OPER ] 
134 OPER < 
134 OPER = 
134 CHAR z  
134 SPEC ) 
134 SPEC ) 
134 SPEC { 

135 IDEN stringArray                                       l  
135 OPER [ 
135 IDEN y                                                 l  
135 OPER ] 
135 OPER = 
135 IDEN stringIn                                          l  
135 OPER [ 
135 IDEN x                                                 l  
135 OPER ] 
135 SPEC ; 

136 IDEN y                                                 l  
136 OPER + 
136 OPER + 
136 SPEC ; 

137 IDEN x                                                 l  
137 OPER + 
137 OPER + 
137 SPEC ; 

138 SPEC } 

139 IDEN x                                                 l  
139 OPER - 
139 OPER - 
139 SPEC ; 

140 IDEN fprintf                                           l  
140 SPEC ( 
140 IDEN Out                                               l  
140 OPER , 
140 STR %d                                                  
140 OPER , 
140 IDEN    lineNo                                         l  
140 SPEC ) 
140 SPEC ; 

141 IDEN fprintf                                           l  
141 SPEC ( 
141 IDEN Out                                               l  
141 OPER , 
141 STR IDEN                                                
141 SPEC ) 
141 SPEC ; 

142 IDEN fprintf                                           l  
142 SPEC ( 
142 IDEN Out                                               l  
142 OPER , 
142 STR %s  \n                                              
142 OPER , 
142 IDEN       stringArray                                 l  
142 SPEC ) 
142 SPEC ; 

143 IDEN break                                             l  
143 SPEC ; 

144 SPEC } 

145 IDEN y                                                 l  
145 OPER = 
145 INTE 0                                                 l  
145 SPEC ; 

146 REWD int 
146 IDEN loop                                              l  
146 INTE 2                                                 l  
146 OPER = 
146 INTE 0                                                 l  
146 SPEC ; 

147 REWD while 
147 SPEC ( 
147 IDEN loop                                              l  
147 INTE 2                                                 l  
147 OPER < 
147 INTE 50                                                l  
147 SPEC ) 
147 SPEC { 

148 IDEN stringArray                                       l  
148 OPER [ 
148 IDEN loop                                              l  
148 INTE 2                                                 l  
148 OPER ] 
148 OPER = 
148 CHAR    
148 SPEC ; 

149 IDEN loop                                              l  
149 INTE 2                                                 l  
149 OPER + 
149 OPER + 
149 SPEC ; 

150 SPEC } 

151 IDEN break                                             l  
151 SPEC ; 

152 REWD case 
152 CHAR g  
152 SPEC : 

153 IDEN stringArray                                       l  
153 OPER [ 
153 IDEN y                                                 l  
153 OPER ] 
153 OPER = 
153 IDEN stringIn                                          l  
153 OPER [ 
153 IDEN x                                                 l  
153 OPER ] 
153 SPEC ; 

154 IDEN x                                                 l  
154 OPER + 
154 OPER + 
154 SPEC ; 

155 IDEN y                                                 l  
155 OPER + 
155 OPER + 
155 SPEC ; 

156 REWD switch 
156 IDEN swh                                               l  
156 IDEN swhh                                              l  
156 SPEC ( 
156 IDEN stringIn                                          l  
156 OPER [ 
156 IDEN x                                                 l  
156 OPER ] 
156 SPEC ) 
156 SPEC { 

157 REWD case 
157 CHAR o  
157 SPEC : 

158 IDEN stringArray                                       l  
158 OPER [ 
158 IDEN y                                                 l  
158 OPER ] 
158 OPER = 
158 IDEN stringIn                                          l  
158 OPER [ 
158 IDEN x                                                 l  
158 OPER ] 
158 SPEC ; 

159 IDEN x                                                 l  
159 OPER + 
159 OPER + 
159 SPEC ; 

160 IDEN y                                                 l  
160 OPER + 
160 OPER + 
160 SPEC ; 

161 REWD if 
161 SPEC ( 
161 SPEC ( 
161 IDEN stringIn                                          l  
161 OPER [ 
161 IDEN x                                                 l  
161 OPER ] 
161 OPER = 
161 OPER = 
161 CHAR t  
161 SPEC ) 
161 OPER & 
161 OPER & 
161 SPEC ( 
161 IDEN stringIn                                          l  
161 OPER [ 
161 IDEN x                                                 l  
161 OPER + 
161 INTE 1                                                 l  
161 OPER ] 
161 OPER = 
161 OPER = 
161 CHAR o  
161 SPEC ) 
161 SPEC ) 
161 SPEC { 

162 IDEN x                                                 l  
162 OPER + 
162 OPER + 
162 SPEC ; 

163 IDEN fprintf                                           l  
163 SPEC ( 
163 IDEN Out                                               l  
163 OPER , 
163 STR %d                                                  
163 OPER , 
163 IDEN    lineNo                                         l  
163 SPEC ) 
163 SPEC ; 

164 IDEN fprintf                                           l  
164 SPEC ( 
164 IDEN Out                                               l  
164 OPER , 
164 STR REWD                                                
164 SPEC ) 
164 SPEC ; 

165 IDEN fprintf                                           l  
165 SPEC ( 
165 IDEN Out                                               l  
165 OPER , 
165 STR goto \n                                             
165 SPEC ) 
165 SPEC ; 

166 SPEC } 

167 REWD else 
167 SPEC { 

168 REWD while 
168 SPEC ( 
168 SPEC ( 
168 IDEN stringIn                                          l  
168 OPER [ 
168 IDEN x                                                 l  
168 OPER ] 
168 OPER > 
168 OPER = 
168 CHAR A  
168 OPER & 
168 OPER & 
168 IDEN stringIn                                          l  
168 OPER [ 
168 IDEN x                                                 l  
168 OPER ] 
168 OPER < 
168 OPER = 
168 CHAR Z  
168 SPEC ) 
168 OPER | 
168 OPER | 
168 SPEC ( 
168 IDEN stringIn                                          l  
168 OPER [ 
168 IDEN x                                                 l  
168 OPER ] 
168 OPER = 
168 OPER = 
168 CHAR _  
168 SPEC ) 
168 OPER | 
168 OPER | 
168 SPEC ( 
168 IDEN stringIn                                          l  
168 OPER [ 
168 IDEN x                                                 l  
168 OPER ] 
168 OPER > 
168 OPER = 
168 CHAR a  
168 OPER & 
168 OPER & 
168 IDEN stringIn                                          l  
168 OPER [ 
168 IDEN x                                                 l  
168 OPER ] 
168 OPER < 
168 OPER = 
168 CHAR z  
168 SPEC ) 
168 SPEC ) 
168 SPEC { 

169 IDEN stringArray                                       l  
169 OPER [ 
169 IDEN y                                                 l  
169 OPER ] 
169 OPER = 
169 IDEN stringIn                                          l  
169 OPER [ 
169 IDEN x                                                 l  
169 OPER ] 
169 SPEC ; 

170 IDEN y                                                 l  
170 OPER + 
170 OPER + 
170 SPEC ; 

171 IDEN x                                                 l  
171 OPER + 
171 OPER + 
171 SPEC ; 

172 SPEC } 

173 IDEN x                                                 l  
173 OPER - 
173 OPER - 
173 SPEC ; 

174 IDEN fprintf                                           l  
174 SPEC ( 
174 IDEN Out                                               l  
174 OPER , 
174 STR %d                                                  
174 OPER , 
174 IDEN    lineNo                                         l  
174 SPEC ) 
174 SPEC ; 

175 IDEN fprintf                                           l  
175 SPEC ( 
175 IDEN Out                                               l  
175 OPER , 
175 STR IDEN                                                
175 SPEC ) 
175 SPEC ; 

176 IDEN fprintf                                           l  
176 SPEC ( 
176 IDEN Out                                               l  
176 OPER , 
176 STR %s  \n                                              
176 OPER , 
176 IDEN       stringArray                                 l  
176 SPEC ) 
176 SPEC ; 

177 SPEC } 

178 IDEN break                                             l  
178 SPEC ; 

179 IDEN default                                           l  
179 SPEC : 

180 REWD while 
180 SPEC ( 
180 SPEC ( 
180 IDEN stringIn                                          l  
180 OPER [ 
180 IDEN x                                                 l  
180 OPER ] 
180 OPER > 
180 OPER = 
180 CHAR A  
180 OPER & 
180 OPER & 
180 IDEN stringIn                                          l  
180 OPER [ 
180 IDEN x                                                 l  
180 OPER ] 
180 OPER < 
180 OPER = 
180 CHAR Z  
180 SPEC ) 
180 OPER | 
180 OPER | 
180 SPEC ( 
180 IDEN stringIn                                          l  
180 OPER [ 
180 IDEN x                                                 l  
180 OPER ] 
180 OPER = 
180 OPER = 
180 CHAR _  
180 SPEC ) 
180 OPER | 
180 OPER | 
180 SPEC ( 
180 IDEN stringIn                                          l  
180 OPER [ 
180 IDEN x                                                 l  
180 OPER ] 
180 OPER > 
180 OPER = 
180 CHAR a  
180 OPER & 
180 OPER & 
180 IDEN stringIn                                          l  
180 OPER [ 
180 IDEN x                                                 l  
180 OPER ] 
180 OPER < 
180 OPER = 
180 CHAR z  
180 SPEC ) 
180 SPEC ) 
180 SPEC { 

181 IDEN stringArray                                       l  
181 OPER [ 
181 IDEN y                                                 l  
181 OPER ] 
181 OPER = 
181 IDEN stringIn                                          l  
181 OPER [ 
181 IDEN x                                                 l  
181 OPER ] 
181 SPEC ; 

182 IDEN y                                                 l  
182 OPER + 
182 OPER + 
182 SPEC ; 

183 IDEN x                                                 l  
183 OPER + 
183 OPER + 
183 SPEC ; 

184 SPEC } 

185 IDEN x                                                 l  
185 OPER - 
185 OPER - 
185 SPEC ; 

186 IDEN fprintf                                           l  
186 SPEC ( 
186 IDEN Out                                               l  
186 OPER , 
186 STR %d                                                  
186 OPER , 
186 IDEN    lineNo                                         l  
186 SPEC ) 
186 SPEC ; 

187 IDEN fprintf                                           l  
187 SPEC ( 
187 IDEN Out                                               l  
187 OPER , 
187 STR IDEN                                                
187 SPEC ) 
187 SPEC ; 

188 IDEN fprintf                                           l  
188 SPEC ( 
188 IDEN Out                                               l  
188 OPER , 
188 STR %s  \n                                              
188 OPER , 
188 IDEN       stringArray                                 l  
188 SPEC ) 
188 SPEC ; 

189 IDEN break                                             l  
189 SPEC ; 

190 SPEC } 

191 IDEN y                                                 l  
191 OPER = 
191 INTE 0                                                 l  
191 SPEC ; 

192 REWD int 
192 IDEN loop                                              l  
192 INTE 11                                                l  
192 OPER = 
192 INTE 0                                                 l  
192 SPEC ; 

193 REWD while 
193 SPEC ( 
193 IDEN loop                                              l  
193 INTE 11                                                l  
193 OPER < 
193 INTE 50                                                l  
193 SPEC ) 
193 SPEC { 

194 IDEN stringArray                                       l  
194 OPER [ 
194 IDEN loop                                              l  
194 INTE 11                                                l  
194 OPER ] 
194 OPER = 
194 CHAR    
194 SPEC ; 

195 IDEN loop                                              l  
195 INTE 11                                                l  
195 OPER + 
195 OPER + 
195 SPEC ; 

196 SPEC } 

197 IDEN break                                             l  
197 SPEC ; 

198 REWD case 
198 CHAR u  
198 SPEC : 

199 IDEN stringArray                                       l  
199 OPER [ 
199 IDEN y                                                 l  
199 OPER ] 
199 OPER = 
199 IDEN stringIn                                          l  
199 OPER [ 
199 IDEN x                                                 l  
199 OPER ] 
199 SPEC ; 

200 IDEN x                                                 l  
200 OPER + 
200 OPER + 
200 SPEC ; 

201 IDEN y                                                 l  
201 OPER + 
201 OPER + 
201 SPEC ; 

202 REWD switch 
202 IDEN swh                                               l  
202 IDEN swhh                                              l  
202 SPEC ( 
202 IDEN stringIn                                          l  
202 OPER [ 
202 IDEN x                                                 l  
202 OPER ] 
202 SPEC ) 
202 SPEC { 

203 REWD case 
203 CHAR n  
203 SPEC : 

204 IDEN stringArray                                       l  
204 OPER [ 
204 IDEN y                                                 l  
204 OPER ] 
204 OPER = 
204 IDEN stringIn                                          l  
204 OPER [ 
204 IDEN x                                                 l  
204 OPER ] 
204 SPEC ; 

205 IDEN x                                                 l  
205 OPER + 
205 OPER + 
205 SPEC ; 

206 IDEN y                                                 l  
206 OPER + 
206 OPER + 
206 SPEC ; 

207 REWD if 
207 SPEC ( 
207 SPEC ( 
207 IDEN stringIn                                          l  
207 OPER [ 
207 IDEN x                                                 l  
207 OPER ] 
207 OPER = 
207 OPER = 
207 CHAR s  
207 SPEC ) 
207 OPER & 
207 OPER & 
207 SPEC ( 
207 IDEN stringIn                                          l  
207 OPER [ 
207 IDEN x                                                 l  
207 OPER + 
207 INTE 1                                                 l  
207 OPER ] 
207 OPER = 
207 OPER = 
207 CHAR i  
207 SPEC ) 
207 OPER & 
207 OPER & 
207 SPEC ( 
207 IDEN stringIn                                          l  
207 OPER [ 
207 IDEN x                                                 l  
207 OPER + 
207 INTE 2                                                 l  
207 OPER ] 
207 OPER = 
207 OPER = 
207 CHAR g  
207 SPEC ) 
207 OPER & 
207 OPER & 
207 SPEC ( 
207 IDEN stringIn                                          l  
207 OPER [ 
207 IDEN x                                                 l  
207 OPER + 
207 INTE 3                                                 l  
207 OPER ] 
207 OPER = 
207 OPER = 
207 CHAR n  
207 SPEC ) 
207 OPER & 
207 OPER & 
207 SPEC ( 
207 IDEN stringIn                                          l  
207 OPER [ 
207 IDEN x                                                 l  
207 OPER + 
207 INTE 4                                                 l  
207 OPER ] 
207 OPER = 
207 OPER = 
207 CHAR e  
207 SPEC ) 
207 OPER & 
207 OPER & 
207 SPEC ( 
207 IDEN stringIn                                          l  
207 OPER [ 
207 IDEN x                                                 l  
207 OPER + 
207 INTE 5                                                 l  
207 OPER ] 
207 OPER = 
207 OPER = 
207 CHAR d  
207 SPEC ) 
207 SPEC ) 
207 SPEC { 

208 IDEN x                                                 l  
208 OPER + 
208 OPER + 
208 SPEC ; 

209 IDEN x                                                 l  
209 OPER + 
209 OPER + 
209 SPEC ; 

210 IDEN x                                                 l  
210 OPER + 
210 OPER + 
210 SPEC ; 

211 IDEN x                                                 l  
211 OPER + 
211 OPER + 
211 SPEC ; 

212 IDEN x                                                 l  
212 OPER + 
212 OPER + 
212 SPEC ; 

213 IDEN fprintf                                           l  
213 SPEC ( 
213 IDEN Out                                               l  
213 OPER , 
213 STR %d                                                  
213 OPER , 
213 IDEN    lineNo                                         l  
213 SPEC ) 
213 SPEC ; 

214 IDEN fprintf                                           l  
214 SPEC ( 
214 IDEN Out                                               l  
214 OPER , 
214 STR REWD                                                
214 SPEC ) 
214 SPEC ; 

215 IDEN fprintf                                           l  
215 SPEC ( 
215 IDEN Out                                               l  
215 OPER , 
215 STR unsigned \n                                         
215 SPEC ) 
215 SPEC ; 

216 SPEC } 

217 REWD else 
217 SPEC { 

218 REWD while 
218 SPEC ( 
218 SPEC ( 
218 IDEN stringIn                                          l  
218 OPER [ 
218 IDEN x                                                 l  
218 OPER ] 
218 OPER > 
218 OPER = 
218 CHAR A  
218 OPER & 
218 OPER & 
218 IDEN stringIn                                          l  
218 OPER [ 
218 IDEN x                                                 l  
218 OPER ] 
218 OPER < 
218 OPER = 
218 CHAR Z  
218 SPEC ) 
218 OPER | 
218 OPER | 
218 SPEC ( 
218 IDEN stringIn                                          l  
218 OPER [ 
218 IDEN x                                                 l  
218 OPER ] 
218 OPER = 
218 OPER = 
218 CHAR _  
218 SPEC ) 
218 OPER | 
218 OPER | 
218 SPEC ( 
218 IDEN stringIn                                          l  
218 OPER [ 
218 IDEN x                                                 l  
218 OPER ] 
218 OPER > 
218 OPER = 
218 CHAR a  
218 OPER & 
218 OPER & 
218 IDEN stringIn                                          l  
218 OPER [ 
218 IDEN x                                                 l  
218 OPER ] 
218 OPER < 
218 OPER = 
218 CHAR z  
218 SPEC ) 
218 SPEC ) 
218 SPEC { 

219 IDEN stringArray                                       l  
219 OPER [ 
219 IDEN y                                                 l  
219 OPER ] 
219 OPER = 
219 IDEN stringIn                                          l  
219 OPER [ 
219 IDEN x                                                 l  
219 OPER ] 
219 SPEC ; 

220 IDEN y                                                 l  
220 OPER + 
220 OPER + 
220 SPEC ; 

221 IDEN x                                                 l  
221 OPER + 
221 OPER + 
221 SPEC ; 

222 SPEC } 

223 IDEN x                                                 l  
223 OPER - 
223 OPER - 
223 SPEC ; 

224 IDEN fprintf                                           l  
224 SPEC ( 
224 IDEN Out                                               l  
224 OPER , 
224 STR %d                                                  
224 OPER , 
224 IDEN    lineNo                                         l  
224 SPEC ) 
224 SPEC ; 

225 IDEN fprintf                                           l  
225 SPEC ( 
225 IDEN Out                                               l  
225 OPER , 
225 STR IDEN                                                
225 SPEC ) 
225 SPEC ; 

226 IDEN fprintf                                           l  
226 SPEC ( 
226 IDEN Out                                               l  
226 OPER , 
226 STR %s  \n                                              
226 OPER , 
226 IDEN       stringArray                                 l  
226 SPEC ) 
226 SPEC ; 

227 SPEC } 

228 IDEN break                                             l  
228 SPEC ; 

229 IDEN default                                           l  
229 SPEC : 

230 REWD while 
230 SPEC ( 
230 SPEC ( 
230 IDEN stringIn                                          l  
230 OPER [ 
230 IDEN x                                                 l  
230 OPER ] 
230 OPER > 
230 OPER = 
230 CHAR A  
230 OPER & 
230 OPER & 
230 IDEN stringIn                                          l  
230 OPER [ 
230 IDEN x                                                 l  
230 OPER ] 
230 OPER < 
230 OPER = 
230 CHAR Z  
230 SPEC ) 
230 OPER | 
230 OPER | 
230 SPEC ( 
230 IDEN stringIn                                          l  
230 OPER [ 
230 IDEN x                                                 l  
230 OPER ] 
230 OPER = 
230 OPER = 
230 CHAR _  
230 SPEC ) 
230 OPER | 
230 OPER | 
230 SPEC ( 
230 IDEN stringIn                                          l  
230 OPER [ 
230 IDEN x                                                 l  
230 OPER ] 
230 OPER > 
230 OPER = 
230 CHAR a  
230 OPER & 
230 OPER & 
230 IDEN stringIn                                          l  
230 OPER [ 
230 IDEN x                                                 l  
230 OPER ] 
230 OPER < 
230 OPER = 
230 CHAR z  
230 SPEC ) 
230 SPEC ) 
230 SPEC { 

231 IDEN stringArray                                       l  
231 OPER [ 
231 IDEN y                                                 l  
231 OPER ] 
231 OPER = 
231 IDEN stringIn                                          l  
231 OPER [ 
231 IDEN x                                                 l  
231 OPER ] 
231 SPEC ; 

232 IDEN y                                                 l  
232 OPER + 
232 OPER + 
232 SPEC ; 

233 IDEN x                                                 l  
233 OPER + 
233 OPER + 
233 SPEC ; 

234 SPEC } 

235 IDEN x                                                 l  
235 OPER - 
235 OPER - 
235 SPEC ; 

236 IDEN fprintf                                           l  
236 SPEC ( 
236 IDEN Out                                               l  
236 OPER , 
236 STR %d                                                  
236 OPER , 
236 IDEN    lineNo                                         l  
236 SPEC ) 
236 SPEC ; 

237 IDEN fprintf                                           l  
237 SPEC ( 
237 IDEN Out                                               l  
237 OPER , 
237 STR IDEN                                                
237 SPEC ) 
237 SPEC ; 

238 IDEN fprintf                                           l  
238 SPEC ( 
238 IDEN Out                                               l  
238 OPER , 
238 STR %s  \n                                              
238 OPER , 
238 IDEN       stringArray                                 l  
238 SPEC ) 
238 SPEC ; 

239 IDEN break                                             l  
239 SPEC ; 

240 SPEC } 

241 IDEN y                                                 l  
241 OPER = 
241 INTE 0                                                 l  
241 SPEC ; 

242 REWD int 
242 IDEN loop                                              l  
242 INTE 12                                                l  
242 OPER = 
242 INTE 0                                                 l  
242 SPEC ; 

243 REWD while 
243 SPEC ( 
243 IDEN loop                                              l  
243 INTE 12                                                l  
243 OPER < 
243 INTE 50                                                l  
243 SPEC ) 
243 SPEC { 

244 IDEN stringArray                                       l  
244 OPER [ 
244 IDEN loop                                              l  
244 INTE 12                                                l  
244 OPER ] 
244 OPER = 
244 CHAR    
244 SPEC ; 

245 IDEN loop                                              l  
245 INTE 12                                                l  
245 OPER + 
245 OPER + 
245 SPEC ; 

246 SPEC } 

247 IDEN break                                             l  
247 SPEC ; 

248 REWD case 
248 CHAR t  
248 SPEC : 

249 IDEN stringArray                                       l  
249 OPER [ 
249 IDEN y                                                 l  
249 OPER ] 
249 OPER = 
249 IDEN stringIn                                          l  
249 OPER [ 
249 IDEN x                                                 l  
249 OPER ] 
249 SPEC ; 

250 IDEN x                                                 l  
250 OPER + 
250 OPER + 
250 SPEC ; 

251 IDEN y                                                 l  
251 OPER + 
251 OPER + 
251 SPEC ; 

252 REWD switch 
252 IDEN swh                                               l  
252 IDEN swhh                                              l  
252 SPEC ( 
252 IDEN stringIn                                          l  
252 OPER [ 
252 IDEN x                                                 l  
252 OPER ] 
252 SPEC ) 
252 SPEC { 

253 REWD case 
253 CHAR y  
253 SPEC : 

254 IDEN stringArray                                       l  
254 OPER [ 
254 IDEN y                                                 l  
254 OPER ] 
254 OPER = 
254 IDEN stringIn                                          l  
254 OPER [ 
254 IDEN x                                                 l  
254 OPER ] 
254 SPEC ; 

255 IDEN x                                                 l  
255 OPER + 
255 OPER + 
255 SPEC ; 

256 IDEN y                                                 l  
256 OPER + 
256 OPER + 
256 SPEC ; 

257 REWD if 
257 SPEC ( 
257 SPEC ( 
257 IDEN stringIn                                          l  
257 OPER [ 
257 IDEN x                                                 l  
257 OPER ] 
257 OPER = 
257 OPER = 
257 CHAR p  
257 SPEC ) 
257 OPER & 
257 OPER & 
257 SPEC ( 
257 IDEN stringIn                                          l  
257 OPER [ 
257 IDEN x                                                 l  
257 OPER + 
257 INTE 1                                                 l  
257 OPER ] 
257 OPER = 
257 OPER = 
257 CHAR e  
257 SPEC ) 
257 OPER & 
257 OPER & 
257 SPEC ( 
257 IDEN stringIn                                          l  
257 OPER [ 
257 IDEN x                                                 l  
257 OPER + 
257 INTE 2                                                 l  
257 OPER ] 
257 OPER = 
257 OPER = 
257 CHAR d  
257 SPEC ) 
257 OPER & 
257 OPER & 
257 SPEC ( 
257 IDEN stringIn                                          l  
257 OPER [ 
257 IDEN x                                                 l  
257 OPER + 
257 INTE 3                                                 l  
257 OPER ] 
257 OPER = 
257 OPER = 
257 CHAR e  
257 SPEC ) 
257 OPER & 
257 OPER & 
257 SPEC ( 
257 IDEN stringIn                                          l  
257 OPER [ 
257 IDEN x                                                 l  
257 OPER + 
257 INTE 4                                                 l  
257 OPER ] 
257 OPER = 
257 OPER = 
257 CHAR f  
257 SPEC ) 
257 SPEC ) 
257 SPEC { 

258 IDEN x                                                 l  
258 OPER + 
258 OPER + 
258 SPEC ; 

259 IDEN x                                                 l  
259 OPER + 
259 OPER + 
259 SPEC ; 

260 IDEN x                                                 l  
260 OPER + 
260 OPER + 
260 SPEC ; 

261 IDEN x                                                 l  
261 OPER + 
261 OPER + 
261 SPEC ; 

262 IDEN fprintf                                           l  
262 SPEC ( 
262 IDEN Out                                               l  
262 OPER , 
262 STR %d                                                  
262 OPER , 
262 IDEN    lineNo                                         l  
262 SPEC ) 
262 SPEC ; 

263 IDEN fprintf                                           l  
263 SPEC ( 
263 IDEN Out                                               l  
263 OPER , 
263 STR REWD                                                
263 SPEC ) 
263 SPEC ; 

264 IDEN fprintf                                           l  
264 SPEC ( 
264 IDEN Out                                               l  
264 OPER , 
264 STR utypedef \n                                         
264 SPEC ) 
264 SPEC ; 

265 SPEC } 

266 REWD else 
266 SPEC { 

267 REWD while 
267 SPEC ( 
267 SPEC ( 
267 IDEN stringIn                                          l  
267 OPER [ 
267 IDEN x                                                 l  
267 OPER ] 
267 OPER > 
267 OPER = 
267 CHAR A  
267 OPER & 
267 OPER & 
267 IDEN stringIn                                          l  
267 OPER [ 
267 IDEN x                                                 l  
267 OPER ] 
267 OPER < 
267 OPER = 
267 CHAR Z  
267 SPEC ) 
267 OPER | 
267 OPER | 
267 SPEC ( 
267 IDEN stringIn                                          l  
267 OPER [ 
267 IDEN x                                                 l  
267 OPER ] 
267 OPER = 
267 OPER = 
267 CHAR _  
267 SPEC ) 
267 OPER | 
267 OPER | 
267 SPEC ( 
267 IDEN stringIn                                          l  
267 OPER [ 
267 IDEN x                                                 l  
267 OPER ] 
267 OPER > 
267 OPER = 
267 CHAR a  
267 OPER & 
267 OPER & 
267 IDEN stringIn                                          l  
267 OPER [ 
267 IDEN x                                                 l  
267 OPER ] 
267 OPER < 
267 OPER = 
267 CHAR z  
267 SPEC ) 
267 SPEC ) 
267 SPEC { 

268 IDEN stringArray                                       l  
268 OPER [ 
268 IDEN y                                                 l  
268 OPER ] 
268 OPER = 
268 IDEN stringIn                                          l  
268 OPER [ 
268 IDEN x                                                 l  
268 OPER ] 
268 SPEC ; 

269 IDEN y                                                 l  
269 OPER + 
269 OPER + 
269 SPEC ; 

270 IDEN x                                                 l  
270 OPER + 
270 OPER + 
270 SPEC ; 

271 SPEC } 

272 IDEN x                                                 l  
272 OPER - 
272 OPER - 
272 SPEC ; 

273 IDEN fprintf                                           l  
273 SPEC ( 
273 IDEN Out                                               l  
273 OPER , 
273 STR %d                                                  
273 OPER , 
273 IDEN    lineNo                                         l  
273 SPEC ) 
273 SPEC ; 

274 IDEN fprintf                                           l  
274 SPEC ( 
274 IDEN Out                                               l  
274 OPER , 
274 STR IDEN                                                
274 SPEC ) 
274 SPEC ; 

275 IDEN fprintf                                           l  
275 SPEC ( 
275 IDEN Out                                               l  
275 OPER , 
275 STR %s  \n                                              
275 OPER , 
275 IDEN       stringArray                                 l  
275 SPEC ) 
275 SPEC ; 

276 SPEC } 

277 IDEN break                                             l  
277 SPEC ; 

278 IDEN default                                           l  
278 SPEC : 

279 REWD while 
279 SPEC ( 
279 SPEC ( 
279 IDEN stringIn                                          l  
279 OPER [ 
279 IDEN x                                                 l  
279 OPER ] 
279 OPER > 
279 OPER = 
279 CHAR A  
279 OPER & 
279 OPER & 
279 IDEN stringIn                                          l  
279 OPER [ 
279 IDEN x                                                 l  
279 OPER ] 
279 OPER < 
279 OPER = 
279 CHAR Z  
279 SPEC ) 
279 OPER | 
279 OPER | 
279 SPEC ( 
279 IDEN stringIn                                          l  
279 OPER [ 
279 IDEN x                                                 l  
279 OPER ] 
279 OPER = 
279 OPER = 
279 CHAR _  
279 SPEC ) 
279 OPER | 
279 OPER | 
279 SPEC ( 
279 IDEN stringIn                                          l  
279 OPER [ 
279 IDEN x                                                 l  
279 OPER ] 
279 OPER > 
279 OPER = 
279 CHAR a  
279 OPER & 
279 OPER & 
279 IDEN stringIn                                          l  
279 OPER [ 
279 IDEN x                                                 l  
279 OPER ] 
279 OPER < 
279 OPER = 
279 CHAR z  
279 SPEC ) 
279 SPEC ) 
279 SPEC { 

280 IDEN stringArray                                       l  
280 OPER [ 
280 IDEN y                                                 l  
280 OPER ] 
280 OPER = 
280 IDEN stringIn                                          l  
280 OPER [ 
280 IDEN x                                                 l  
280 OPER ] 
280 SPEC ; 

281 IDEN y                                                 l  
281 OPER + 
281 OPER + 
281 SPEC ; 

282 IDEN x                                                 l  
282 OPER + 
282 OPER + 
282 SPEC ; 

283 SPEC } 

284 IDEN x                                                 l  
284 OPER - 
284 OPER - 
284 SPEC ; 

285 IDEN fprintf                                           l  
285 SPEC ( 
285 IDEN Out                                               l  
285 OPER , 
285 STR %d                                                  
285 OPER , 
285 IDEN    lineNo                                         l  
285 SPEC ) 
285 SPEC ; 

286 IDEN fprintf                                           l  
286 SPEC ( 
286 IDEN Out                                               l  
286 OPER , 
286 STR IDEN                                                
286 SPEC ) 
286 SPEC ; 

287 IDEN fprintf                                           l  
287 SPEC ( 
287 IDEN Out                                               l  
287 OPER , 
287 STR %s  \n                                              
287 OPER , 
287 IDEN       stringArray                                 l  
287 SPEC ) 
287 SPEC ; 

288 IDEN break                                             l  
288 SPEC ; 

289 SPEC } 

290 IDEN y                                                 l  
290 OPER = 
290 INTE 0                                                 l  
290 SPEC ; 

291 REWD int 
291 IDEN loop                                              l  
291 INTE 13                                                l  
291 OPER = 
291 INTE 0                                                 l  
291 SPEC ; 

292 REWD while 
292 SPEC ( 
292 IDEN loop                                              l  
292 INTE 13                                                l  
292 OPER < 
292 INTE 50                                                l  
292 SPEC ) 
292 SPEC { 

293 IDEN stringArray                                       l  
293 OPER [ 
293 IDEN loop                                              l  
293 INTE 13                                                l  
293 OPER ] 
293 OPER = 
293 CHAR    
293 SPEC ; 

294 IDEN loop                                              l  
294 INTE 13                                                l  
294 OPER + 
294 OPER + 
294 SPEC ; 

295 SPEC } 

296 IDEN break                                             l  
296 SPEC ; 

297 REWD case 
297 CHAR v  
297 SPEC : 

298 IDEN stringArray                                       l  
298 OPER [ 
298 IDEN y                                                 l  
298 OPER ] 
298 OPER = 
298 IDEN stringIn                                          l  
298 OPER [ 
298 IDEN x                                                 l  
298 OPER ] 
298 SPEC ; 

299 IDEN x                                                 l  
299 OPER + 
299 OPER + 
299 SPEC ; 

300 IDEN y                                                 l  
300 OPER + 
300 OPER + 
300 SPEC ; 

301 REWD switch 
301 IDEN swh                                               l  
301 IDEN swhh                                              l  
301 SPEC ( 
301 IDEN stringIn                                          l  
301 OPER [ 
301 IDEN x                                                 l  
301 OPER ] 
301 SPEC ) 
301 SPEC { 

302 REWD case 
302 CHAR o  
302 SPEC : 

303 IDEN stringArray                                       l  
303 OPER [ 
303 IDEN y                                                 l  
303 OPER ] 
303 OPER = 
303 IDEN stringIn                                          l  
303 OPER [ 
303 IDEN x                                                 l  
303 OPER ] 
303 SPEC ; 

304 IDEN x                                                 l  
304 OPER + 
304 OPER + 
304 SPEC ; 

305 IDEN y                                                 l  
305 OPER + 
305 OPER + 
305 SPEC ; 

306 REWD if 
306 SPEC ( 
306 SPEC ( 
306 IDEN stringIn                                          l  
306 OPER [ 
306 IDEN x                                                 l  
306 OPER ] 
306 OPER = 
306 OPER = 
306 CHAR i  
306 SPEC ) 
306 OPER & 
306 OPER & 
306 SPEC ( 
306 IDEN stringIn                                          l  
306 OPER [ 
306 IDEN x                                                 l  
306 OPER + 
306 INTE 1                                                 l  
306 OPER ] 
306 OPER = 
306 OPER = 
306 CHAR d  
306 SPEC ) 
306 SPEC ) 
306 SPEC { 

307 IDEN x                                                 l  
307 OPER + 
307 OPER + 
307 SPEC ; 

308 IDEN fprintf                                           l  
308 SPEC ( 
308 IDEN Out                                               l  
308 OPER , 
308 STR %d                                                  
308 OPER , 
308 IDEN    lineNo                                         l  
308 SPEC ) 
308 SPEC ; 

309 IDEN fprintf                                           l  
309 SPEC ( 
309 IDEN Out                                               l  
309 OPER , 
309 STR REWD                                                
309 SPEC ) 
309 SPEC ; 

310 IDEN fprintf                                           l  
310 SPEC ( 
310 IDEN Out                                               l  
310 OPER , 
310 STR void \n                                             
310 SPEC ) 
310 SPEC ; 

311 SPEC } 

312 REWD else 
312 SPEC { 

313 REWD while 
313 SPEC ( 
313 SPEC ( 
313 IDEN stringIn                                          l  
313 OPER [ 
313 IDEN x                                                 l  
313 OPER ] 
313 OPER > 
313 OPER = 
313 CHAR A  
313 OPER & 
313 OPER & 
313 IDEN stringIn                                          l  
313 OPER [ 
313 IDEN x                                                 l  
313 OPER ] 
313 OPER < 
313 OPER = 
313 CHAR Z  
313 SPEC ) 
313 OPER | 
313 OPER | 
313 SPEC ( 
313 IDEN stringIn                                          l  
313 OPER [ 
313 IDEN x                                                 l  
313 OPER ] 
313 OPER = 
313 OPER = 
313 CHAR _  
313 SPEC ) 
313 OPER | 
313 OPER | 
313 SPEC ( 
313 IDEN stringIn                                          l  
313 OPER [ 
313 IDEN x                                                 l  
313 OPER ] 
313 OPER > 
313 OPER = 
313 CHAR a  
313 OPER & 
313 OPER & 
313 IDEN stringIn                                          l  
313 OPER [ 
313 IDEN x                                                 l  
313 OPER ] 
313 OPER < 
313 OPER = 
313 CHAR z  
313 SPEC ) 
313 SPEC ) 
313 SPEC { 

314 IDEN stringArray                                       l  
314 OPER [ 
314 IDEN y                                                 l  
314 OPER ] 
314 OPER = 
314 IDEN stringIn                                          l  
314 OPER [ 
314 IDEN x                                                 l  
314 OPER ] 
314 SPEC ; 

315 IDEN y                                                 l  
315 OPER + 
315 OPER + 
315 SPEC ; 

316 IDEN x                                                 l  
316 OPER + 
316 OPER + 
316 SPEC ; 

317 SPEC } 

318 IDEN x                                                 l  
318 OPER - 
318 OPER - 
318 SPEC ; 

319 IDEN fprintf                                           l  
319 SPEC ( 
319 IDEN Out                                               l  
319 OPER , 
319 STR %d                                                  
319 OPER , 
319 IDEN    lineNo                                         l  
319 SPEC ) 
319 SPEC ; 

320 IDEN fprintf                                           l  
320 SPEC ( 
320 IDEN Out                                               l  
320 OPER , 
320 STR IDEN                                                
320 SPEC ) 
320 SPEC ; 

321 IDEN fprintf                                           l  
321 SPEC ( 
321 IDEN Out                                               l  
321 OPER , 
321 STR %s  \n                                              
321 OPER , 
321 IDEN       stringArray                                 l  
321 SPEC ) 
321 SPEC ; 

322 SPEC } 

323 IDEN break                                             l  
323 SPEC ; 

324 IDEN default                                           l  
324 SPEC : 

325 REWD while 
325 SPEC ( 
325 SPEC ( 
325 IDEN stringIn                                          l  
325 OPER [ 
325 IDEN x                                                 l  
325 OPER ] 
325 OPER > 
325 OPER = 
325 CHAR A  
325 OPER & 
325 OPER & 
325 IDEN stringIn                                          l  
325 OPER [ 
325 IDEN x                                                 l  
325 OPER ] 
325 OPER < 
325 OPER = 
325 CHAR Z  
325 SPEC ) 
325 OPER | 
325 OPER | 
325 SPEC ( 
325 IDEN stringIn                                          l  
325 OPER [ 
325 IDEN x                                                 l  
325 OPER ] 
325 OPER = 
325 OPER = 
325 CHAR _  
325 SPEC ) 
325 OPER | 
325 OPER | 
325 SPEC ( 
325 IDEN stringIn                                          l  
325 OPER [ 
325 IDEN x                                                 l  
325 OPER ] 
325 OPER > 
325 OPER = 
325 CHAR a  
325 OPER & 
325 OPER & 
325 IDEN stringIn                                          l  
325 OPER [ 
325 IDEN x                                                 l  
325 OPER ] 
325 OPER < 
325 OPER = 
325 CHAR z  
325 SPEC ) 
325 SPEC ) 
325 SPEC { 

326 IDEN stringArray                                       l  
326 OPER [ 
326 IDEN y                                                 l  
326 OPER ] 
326 OPER = 
326 IDEN stringIn                                          l  
326 OPER [ 
326 IDEN x                                                 l  
326 OPER ] 
326 SPEC ; 

327 IDEN y                                                 l  
327 OPER + 
327 OPER + 
327 SPEC ; 

328 IDEN x                                                 l  
328 OPER + 
328 OPER + 
328 SPEC ; 

329 SPEC } 

330 IDEN x                                                 l  
330 OPER - 
330 OPER - 
330 SPEC ; 

331 IDEN fprintf                                           l  
331 SPEC ( 
331 IDEN Out                                               l  
331 OPER , 
331 STR %d                                                  
331 OPER , 
331 IDEN    lineNo                                         l  
331 SPEC ) 
331 SPEC ; 

332 IDEN fprintf                                           l  
332 SPEC ( 
332 IDEN Out                                               l  
332 OPER , 
332 STR IDEN                                                
332 SPEC ) 
332 SPEC ; 

333 IDEN fprintf                                           l  
333 SPEC ( 
333 IDEN Out                                               l  
333 OPER , 
333 STR %s  \n                                              
333 OPER , 
333 IDEN       stringArray                                 l  
333 SPEC ) 
333 SPEC ; 

334 IDEN break                                             l  
334 SPEC ; 

335 SPEC } 

336 IDEN y                                                 l  
336 OPER = 
336 INTE 0                                                 l  
336 SPEC ; 

337 REWD int 
337 IDEN loop                                              l  
337 INTE 14                                                l  
337 OPER = 
337 INTE 0                                                 l  
337 SPEC ; 

338 REWD while 
338 SPEC ( 
338 IDEN loop                                              l  
338 INTE 14                                                l  
338 OPER < 
338 INTE 50                                                l  
338 SPEC ) 
338 SPEC { 

339 IDEN stringArray                                       l  
339 OPER [ 
339 IDEN loop                                              l  
339 INTE 14                                                l  
339 OPER ] 
339 OPER = 
339 CHAR    
339 SPEC ; 

340 IDEN loop                                              l  
340 INTE 14                                                l  
340 OPER + 
340 OPER + 
340 SPEC ; 

341 SPEC } 

342 IDEN break                                             l  
342 SPEC ; 

343 REWD case 
343 CHAR l  
343 SPEC : 

344 IDEN stringArray                                       l  
344 OPER [ 
344 IDEN y                                                 l  
344 OPER ] 
344 OPER = 
344 IDEN stringIn                                          l  
344 OPER [ 
344 IDEN x                                                 l  
344 OPER ] 
344 SPEC ; 

345 IDEN x                                                 l  
345 OPER + 
345 OPER + 
345 SPEC ; 

346 IDEN y                                                 l  
346 OPER + 
346 OPER + 
346 SPEC ; 

347 REWD switch 
347 IDEN swh                                               l  
347 IDEN swhh                                              l  
347 SPEC ( 
347 IDEN stringIn                                          l  
347 OPER [ 
347 IDEN x                                                 l  
347 OPER ] 
347 SPEC ) 
347 SPEC { 

348 REWD case 
348 CHAR o  
348 SPEC : 

349 IDEN stringArray                                       l  
349 OPER [ 
349 IDEN y                                                 l  
349 OPER ] 
349 OPER = 
349 IDEN stringIn                                          l  
349 OPER [ 
349 IDEN x                                                 l  
349 OPER ] 
349 SPEC ; 

350 IDEN x                                                 l  
350 OPER + 
350 OPER + 
350 SPEC ; 

351 IDEN y                                                 l  
351 OPER + 
351 OPER + 
351 SPEC ; 

352 REWD if 
352 SPEC ( 
352 IDEN stringIn                                          l  
352 OPER [ 
352 IDEN x                                                 l  
352 OPER ] 
352 OPER = 
352 OPER = 
352 CHAR n  
352 OPER & 
352 OPER & 
352 IDEN stringIn                                          l  
352 OPER [ 
352 IDEN x                                                 l  
352 OPER + 
352 INTE 1                                                 l  
352 OPER ] 
352 OPER = 
352 OPER = 
352 CHAR g  
352 SPEC ) 
352 SPEC { 

353 IDEN x                                                 l  
353 OPER + 
353 OPER + 
353 SPEC ; 

354 IDEN fprintf                                           l  
354 SPEC ( 
354 IDEN Out                                               l  
354 OPER , 
354 STR %d                                                  
354 OPER , 
354 IDEN    lineNo                                         l  
354 SPEC ) 
354 SPEC ; 

355 IDEN fprintf                                           l  
355 SPEC ( 
355 IDEN Out                                               l  
355 OPER , 
355 STR REWD                                                
355 SPEC ) 
355 SPEC ; 

356 IDEN fprintf                                           l  
356 SPEC ( 
356 IDEN Out                                               l  
356 OPER , 
356 STR long \n                                             
356 SPEC ) 
356 SPEC ; 

357 SPEC } 

358 REWD else 
358 SPEC { 

359 REWD while 
359 SPEC ( 
359 SPEC ( 
359 IDEN stringIn                                          l  
359 OPER [ 
359 IDEN x                                                 l  
359 OPER ] 
359 OPER > 
359 OPER = 
359 CHAR A  
359 OPER & 
359 OPER & 
359 IDEN stringIn                                          l  
359 OPER [ 
359 IDEN x                                                 l  
359 OPER ] 
359 OPER < 
359 OPER = 
359 CHAR Z  
359 SPEC ) 
359 OPER | 
359 OPER | 
359 SPEC ( 
359 IDEN stringIn                                          l  
359 OPER [ 
359 IDEN x                                                 l  
359 OPER ] 
359 OPER = 
359 OPER = 
359 CHAR _  
359 SPEC ) 
359 OPER | 
359 OPER | 
359 SPEC ( 
359 IDEN stringIn                                          l  
359 OPER [ 
359 IDEN x                                                 l  
359 OPER ] 
359 OPER > 
359 OPER = 
359 CHAR a  
359 OPER & 
359 OPER & 
359 IDEN stringIn                                          l  
359 OPER [ 
359 IDEN x                                                 l  
359 OPER ] 
359 OPER < 
359 OPER = 
359 CHAR z  
359 SPEC ) 
359 SPEC ) 
359 SPEC { 

360 IDEN stringArray                                       l  
360 OPER [ 
360 IDEN y                                                 l  
360 OPER ] 
360 OPER = 
360 IDEN stringIn                                          l  
360 OPER [ 
360 IDEN x                                                 l  
360 OPER ] 
360 SPEC ; 

361 IDEN y                                                 l  
361 OPER + 
361 OPER + 
361 SPEC ; 

362 IDEN x                                                 l  
362 OPER + 
362 OPER + 
362 SPEC ; 

363 SPEC } 

364 IDEN x                                                 l  
364 OPER - 
364 OPER - 
364 SPEC ; 

365 IDEN fprintf                                           l  
365 SPEC ( 
365 IDEN Out                                               l  
365 OPER , 
365 STR %d                                                  
365 OPER , 
365 IDEN    lineNo                                         l  
365 SPEC ) 
365 SPEC ; 

366 IDEN fprintf                                           l  
366 SPEC ( 
366 IDEN Out                                               l  
366 OPER , 
366 STR IDEN                                                
366 SPEC ) 
366 SPEC ; 

367 IDEN fprintf                                           l  
367 SPEC ( 
367 IDEN Out                                               l  
367 OPER , 
367 STR %s  \n                                              
367 OPER , 
367 IDEN       stringArray                                 l  
367 SPEC ) 
367 SPEC ; 

368 SPEC } 

369 IDEN break                                             l  
369 SPEC ; 

370 IDEN default                                           l  
370 SPEC : 

371 REWD while 
371 SPEC ( 
371 SPEC ( 
371 IDEN stringIn                                          l  
371 OPER [ 
371 IDEN x                                                 l  
371 OPER ] 
371 OPER > 
371 OPER = 
371 CHAR A  
371 OPER & 
371 OPER & 
371 IDEN stringIn                                          l  
371 OPER [ 
371 IDEN x                                                 l  
371 OPER ] 
371 OPER < 
371 OPER = 
371 CHAR Z  
371 SPEC ) 
371 OPER | 
371 OPER | 
371 SPEC ( 
371 IDEN stringIn                                          l  
371 OPER [ 
371 IDEN x                                                 l  
371 OPER ] 
371 OPER = 
371 OPER = 
371 CHAR _  
371 SPEC ) 
371 OPER | 
371 OPER | 
371 SPEC ( 
371 IDEN stringIn                                          l  
371 OPER [ 
371 IDEN x                                                 l  
371 OPER ] 
371 OPER > 
371 OPER = 
371 CHAR a  
371 OPER & 
371 OPER & 
371 IDEN stringIn                                          l  
371 OPER [ 
371 IDEN x                                                 l  
371 OPER ] 
371 OPER < 
371 OPER = 
371 CHAR z  
371 SPEC ) 
371 SPEC ) 
371 SPEC { 

372 IDEN stringArray                                       l  
372 OPER [ 
372 IDEN y                                                 l  
372 OPER ] 
372 OPER = 
372 IDEN stringIn                                          l  
372 OPER [ 
372 IDEN x                                                 l  
372 OPER ] 
372 SPEC ; 

373 IDEN y                                                 l  
373 OPER + 
373 OPER + 
373 SPEC ; 

374 IDEN x                                                 l  
374 OPER + 
374 OPER + 
374 SPEC ; 

375 SPEC } 

376 IDEN x                                                 l  
376 OPER - 
376 OPER - 
376 SPEC ; 

377 IDEN fprintf                                           l  
377 SPEC ( 
377 IDEN Out                                               l  
377 OPER , 
377 STR %d                                                  
377 OPER , 
377 IDEN    lineNo                                         l  
377 SPEC ) 
377 SPEC ; 

378 IDEN fprintf                                           l  
378 SPEC ( 
378 IDEN Out                                               l  
378 OPER , 
378 STR IDEN                                                
378 SPEC ) 
378 SPEC ; 

379 IDEN fprintf                                           l  
379 SPEC ( 
379 IDEN Out                                               l  
379 OPER , 
379 STR %s  \n                                              
379 OPER , 
379 IDEN       stringArray                                 l  
379 SPEC ) 
379 SPEC ; 

380 IDEN break                                             l  
380 SPEC ; 

381 SPEC } 

382 IDEN y                                                 l  
382 OPER = 
382 INTE 0                                                 l  
382 SPEC ; 

383 REWD int 
383 IDEN loop                                              l  
383 INTE 10                                                l  
383 OPER = 
383 INTE 0                                                 l  
383 SPEC ; 

384 REWD while 
384 SPEC ( 
384 IDEN loop                                              l  
384 INTE 10                                                l  
384 OPER < 
384 INTE 30                                                l  
384 SPEC ) 
384 SPEC { 

385 IDEN stringArray                                       l  
385 OPER [ 
385 IDEN loop                                              l  
385 INTE 10                                                l  
385 OPER ] 
385 OPER = 
385 CHAR    
385 SPEC ; 

386 IDEN loop                                              l  
386 INTE 10                                                l  
386 OPER + 
386 OPER + 
386 SPEC ; 

387 SPEC } 

388 IDEN break                                             l  
388 SPEC ; 

389 REWD case 
389 CHAR w  
389 SPEC : 

390 IDEN stringArray                                       l  
390 OPER [ 
390 IDEN y                                                 l  
390 OPER ] 
390 OPER = 
390 IDEN stringIn                                          l  
390 OPER [ 
390 IDEN x                                                 l  
390 OPER ] 
390 SPEC ; 

391 IDEN x                                                 l  
391 OPER + 
391 OPER + 
391 SPEC ; 

392 IDEN y                                                 l  
392 OPER + 
392 OPER + 
392 SPEC ; 

393 REWD switch 
393 IDEN swh                                               l  
393 IDEN swhh                                              l  
393 SPEC ( 
393 IDEN stringIn                                          l  
393 OPER [ 
393 IDEN x                                                 l  
393 OPER ] 
393 SPEC ) 
393 SPEC { 

394 REWD case 
394 CHAR h  
394 SPEC : 

395 IDEN stringArray                                       l  
395 OPER [ 
395 IDEN y                                                 l  
395 OPER ] 
395 OPER = 
395 IDEN stringIn                                          l  
395 OPER [ 
395 IDEN x                                                 l  
395 OPER ] 
395 SPEC ; 

396 IDEN x                                                 l  
396 OPER + 
396 OPER + 
396 SPEC ; 

397 IDEN y                                                 l  
397 OPER + 
397 OPER + 
397 SPEC ; 

398 REWD if 
398 SPEC ( 
398 SPEC ( 
398 IDEN stringIn                                          l  
398 OPER [ 
398 IDEN x                                                 l  
398 OPER ] 
398 OPER = 
398 OPER = 
398 CHAR i  
398 SPEC ) 
398 OPER & 
398 OPER & 
398 SPEC ( 
398 IDEN stringIn                                          l  
398 OPER [ 
398 IDEN x                                                 l  
398 OPER + 
398 INTE 1                                                 l  
398 OPER ] 
398 OPER = 
398 OPER = 
398 CHAR l  
398 SPEC ) 
398 OPER & 
398 OPER & 
398 SPEC ( 
398 IDEN stringIn                                          l  
398 OPER [ 
398 IDEN x                                                 l  
398 OPER + 
398 INTE 2                                                 l  
398 OPER ] 
398 OPER = 
398 OPER = 
398 CHAR e  
398 SPEC ) 
398 SPEC ) 
398 SPEC { 

399 IDEN x                                                 l  
399 OPER + 
399 OPER + 
399 SPEC ; 

400 IDEN x                                                 l  
400 OPER + 
400 OPER + 
400 SPEC ; 

401 IDEN fprintf                                           l  
401 SPEC ( 
401 IDEN Out                                               l  
401 OPER , 
401 STR %d                                                  
401 OPER , 
401 IDEN    lineNo                                         l  
401 SPEC ) 
401 SPEC ; 

402 IDEN fprintf                                           l  
402 SPEC ( 
402 IDEN Out                                               l  
402 OPER , 
402 STR REWD                                                
402 SPEC ) 
402 SPEC ; 

403 IDEN fprintf                                           l  
403 SPEC ( 
403 IDEN Out                                               l  
403 OPER , 
403 STR while \n                                            
403 SPEC ) 
403 SPEC ; 

404 SPEC } 

405 REWD else 
405 SPEC { 

406 REWD while 
406 SPEC ( 
406 SPEC ( 
406 IDEN stringIn                                          l  
406 OPER [ 
406 IDEN x                                                 l  
406 OPER ] 
406 OPER > 
406 OPER = 
406 CHAR A  
406 OPER & 
406 OPER & 
406 IDEN stringIn                                          l  
406 OPER [ 
406 IDEN x                                                 l  
406 OPER ] 
406 OPER < 
406 OPER = 
406 CHAR Z  
406 SPEC ) 
406 OPER | 
406 OPER | 
406 SPEC ( 
406 IDEN stringIn                                          l  
406 OPER [ 
406 IDEN x                                                 l  
406 OPER ] 
406 OPER = 
406 OPER = 
406 CHAR _  
406 SPEC ) 
406 OPER | 
406 OPER | 
406 SPEC ( 
406 IDEN stringIn                                          l  
406 OPER [ 
406 IDEN x                                                 l  
406 OPER ] 
406 OPER > 
406 OPER = 
406 CHAR a  
406 OPER & 
406 OPER & 
406 IDEN stringIn                                          l  
406 OPER [ 
406 IDEN x                                                 l  
406 OPER ] 
406 OPER < 
406 OPER = 
406 CHAR z  
406 SPEC ) 
406 SPEC ) 
406 SPEC { 

407 IDEN stringArray                                       l  
407 OPER [ 
407 IDEN y                                                 l  
407 OPER ] 
407 OPER = 
407 IDEN stringIn                                          l  
407 OPER [ 
407 IDEN x                                                 l  
407 OPER ] 
407 SPEC ; 

408 IDEN y                                                 l  
408 OPER + 
408 OPER + 
408 SPEC ; 

409 IDEN x                                                 l  
409 OPER + 
409 OPER + 
409 SPEC ; 

410 SPEC } 

411 IDEN x                                                 l  
411 OPER - 
411 OPER - 
411 SPEC ; 

412 IDEN fprintf                                           l  
412 SPEC ( 
412 IDEN Out                                               l  
412 OPER , 
412 STR %d                                                  
412 OPER , 
412 IDEN    lineNo                                         l  
412 SPEC ) 
412 SPEC ; 

413 IDEN fprintf                                           l  
413 SPEC ( 
413 IDEN Out                                               l  
413 OPER , 
413 STR IDEN                                                
413 SPEC ) 
413 SPEC ; 

414 IDEN fprintf                                           l  
414 SPEC ( 
414 IDEN Out                                               l  
414 OPER , 
414 STR %s  \n                                              
414 OPER , 
414 IDEN       stringArray                                 l  
414 SPEC ) 
414 SPEC ; 

415 SPEC } 

416 IDEN break                                             l  
416 SPEC ; 

417 IDEN default                                           l  
417 SPEC : 

418 REWD while 
418 SPEC ( 
418 SPEC ( 
418 IDEN stringIn                                          l  
418 OPER [ 
418 IDEN x                                                 l  
418 OPER ] 
418 OPER > 
418 OPER = 
418 CHAR A  
418 OPER & 
418 OPER & 
418 IDEN stringIn                                          l  
418 OPER [ 
418 IDEN x                                                 l  
418 OPER ] 
418 OPER < 
418 OPER = 
418 CHAR Z  
418 SPEC ) 
418 OPER | 
418 OPER | 
418 SPEC ( 
418 IDEN stringIn                                          l  
418 OPER [ 
418 IDEN x                                                 l  
418 OPER ] 
418 OPER = 
418 OPER = 
418 CHAR _  
418 SPEC ) 
418 OPER | 
418 OPER | 
418 SPEC ( 
418 IDEN stringIn                                          l  
418 OPER [ 
418 IDEN x                                                 l  
418 OPER ] 
418 OPER > 
418 OPER = 
418 CHAR a  
418 OPER & 
418 OPER & 
418 IDEN stringIn                                          l  
418 OPER [ 
418 IDEN x                                                 l  
418 OPER ] 
418 OPER < 
418 OPER = 
418 CHAR z  
418 SPEC ) 
418 SPEC ) 
418 SPEC { 

419 IDEN stringArray                                       l  
419 OPER [ 
419 IDEN y                                                 l  
419 OPER ] 
419 OPER = 
419 IDEN stringIn                                          l  
419 OPER [ 
419 IDEN x                                                 l  
419 OPER ] 
419 SPEC ; 

420 IDEN y                                                 l  
420 OPER + 
420 OPER + 
420 SPEC ; 

421 IDEN x                                                 l  
421 OPER + 
421 OPER + 
421 SPEC ; 

422 SPEC } 

423 IDEN x                                                 l  
423 OPER - 
423 OPER - 
423 SPEC ; 

424 IDEN fprintf                                           l  
424 SPEC ( 
424 IDEN Out                                               l  
424 OPER , 
424 STR %d                                                  
424 OPER , 
424 IDEN    lineNo                                         l  
424 SPEC ) 
424 SPEC ; 

425 IDEN fprintf                                           l  
425 SPEC ( 
425 IDEN Out                                               l  
425 OPER , 
425 STR IDEN                                                
425 SPEC ) 
425 SPEC ; 

426 IDEN fprintf                                           l  
426 SPEC ( 
426 IDEN Out                                               l  
426 OPER , 
426 STR %s  \n                                              
426 OPER , 
426 IDEN       stringArray                                 l  
426 SPEC ) 
426 SPEC ; 

427 IDEN break                                             l  
427 SPEC ; 

428 SPEC } 

429 IDEN y                                                 l  
429 OPER = 
429 INTE 0                                                 l  
429 SPEC ; 

430 REWD int 
430 IDEN loop                                              l  
430 INTE 3                                                 l  
430 OPER = 
430 INTE 0                                                 l  
430 SPEC ; 

431 REWD while 
431 SPEC ( 
431 IDEN loop                                              l  
431 INTE 3                                                 l  
431 OPER < 
431 INTE 50                                                l  
431 SPEC ) 
431 SPEC { 

432 IDEN stringArray                                       l  
432 OPER [ 
432 IDEN loop                                              l  
432 INTE 3                                                 l  
432 OPER ] 
432 OPER = 
432 CHAR    
432 SPEC ; 

433 IDEN loop                                              l  
433 INTE 3                                                 l  
433 OPER + 
433 OPER + 
433 SPEC ; 

434 SPEC } 

435 IDEN break                                             l  
435 SPEC ; 

436 REWD case 
436 CHAR i  
436 SPEC : 

437 IDEN stringArray                                       l  
437 OPER [ 
437 IDEN y                                                 l  
437 OPER ] 
437 OPER = 
437 IDEN stringIn                                          l  
437 OPER [ 
437 IDEN x                                                 l  
437 OPER ] 
437 SPEC ; 

438 IDEN x                                                 l  
438 OPER + 
438 OPER + 
438 SPEC ; 

439 IDEN y                                                 l  
439 OPER + 
439 OPER + 
439 SPEC ; 

440 REWD switch 
440 IDEN swh                                               l  
440 IDEN swhh                                              l  
440 SPEC ( 
440 IDEN stringIn                                          l  
440 OPER [ 
440 IDEN x                                                 l  
440 OPER ] 
440 SPEC ) 
440 SPEC { 

441 REWD case 
441 CHAR f  
441 SPEC : 

442 IDEN fprintf                                           l  
442 SPEC ( 
442 IDEN Out                                               l  
442 OPER , 
442 STR %d                                                  
442 OPER , 
442 IDEN    lineNo                                         l  
442 SPEC ) 
442 SPEC ; 

443 IDEN fprintf                                           l  
443 SPEC ( 
443 IDEN Out                                               l  
443 OPER , 
443 STR REWD                                                
443 SPEC ) 
443 SPEC ; 

444 IDEN fprintf                                           l  
444 SPEC ( 
444 IDEN Out                                               l  
444 OPER , 
444 STR if \n                                               
444 SPEC ) 
444 SPEC ; 

445 IDEN break                                             l  
445 SPEC ; 

446 REWD case 
446 CHAR n  
446 SPEC : 

447 IDEN stringArray                                       l  
447 OPER [ 
447 IDEN y                                                 l  
447 OPER ] 
447 OPER = 
447 IDEN stringIn                                          l  
447 OPER [ 
447 IDEN x                                                 l  
447 OPER ] 
447 SPEC ; 

448 IDEN x                                                 l  
448 OPER + 
448 OPER + 
448 SPEC ; 

449 IDEN y                                                 l  
449 OPER + 
449 OPER + 
449 SPEC ; 

450 REWD if 
450 SPEC ( 
450 IDEN stringIn                                          l  
450 OPER [ 
450 IDEN x                                                 l  
450 OPER ] 
450 OPER = 
450 OPER = 
450 CHAR t  
450 SPEC ) 
450 SPEC { 

451 IDEN fprintf                                           l  
451 SPEC ( 
451 IDEN Out                                               l  
451 OPER , 
451 STR %d                                                  
451 OPER , 
451 IDEN    lineNo                                         l  
451 SPEC ) 
451 SPEC ; 

452 IDEN fprintf                                           l  
452 SPEC ( 
452 IDEN Out                                               l  
452 OPER , 
452 STR REWD                                                
452 SPEC ) 
452 SPEC ; 

453 IDEN fprintf                                           l  
453 SPEC ( 
453 IDEN Out                                               l  
453 OPER , 
453 STR int \n                                              
453 SPEC ) 
453 SPEC ; 

454 SPEC } 

455 REWD else 
455 SPEC { 

456 REWD while 
456 SPEC ( 
456 SPEC ( 
456 IDEN stringIn                                          l  
456 OPER [ 
456 IDEN x                                                 l  
456 OPER ] 
456 OPER > 
456 OPER = 
456 CHAR A  
456 OPER & 
456 OPER & 
456 IDEN stringIn                                          l  
456 OPER [ 
456 IDEN x                                                 l  
456 OPER ] 
456 OPER < 
456 OPER = 
456 CHAR Z  
456 SPEC ) 
456 OPER | 
456 OPER | 
456 SPEC ( 
456 IDEN stringIn                                          l  
456 OPER [ 
456 IDEN x                                                 l  
456 OPER ] 
456 OPER = 
456 OPER = 
456 CHAR _  
456 SPEC ) 
456 OPER | 
456 OPER | 
456 SPEC ( 
456 IDEN stringIn                                          l  
456 OPER [ 
456 IDEN x                                                 l  
456 OPER ] 
456 OPER > 
456 OPER = 
456 CHAR a  
456 OPER & 
456 OPER & 
456 IDEN stringIn                                          l  
456 OPER [ 
456 IDEN x                                                 l  
456 OPER ] 
456 OPER < 
456 OPER = 
456 CHAR z  
456 SPEC ) 
456 SPEC ) 
456 SPEC { 

457 IDEN stringArray                                       l  
457 OPER [ 
457 IDEN y                                                 l  
457 OPER ] 
457 OPER = 
457 IDEN stringIn                                          l  
457 OPER [ 
457 IDEN x                                                 l  
457 OPER ] 
457 SPEC ; 

458 IDEN y                                                 l  
458 OPER + 
458 OPER + 
458 SPEC ; 

459 IDEN x                                                 l  
459 OPER + 
459 OPER + 
459 SPEC ; 

460 SPEC } 

461 IDEN x                                                 l  
461 OPER - 
461 OPER - 
461 SPEC ; 

462 IDEN fprintf                                           l  
462 SPEC ( 
462 IDEN Out                                               l  
462 OPER , 
462 STR %d                                                  
462 OPER , 
462 IDEN    lineNo                                         l  
462 SPEC ) 
462 SPEC ; 

463 IDEN fprintf                                           l  
463 SPEC ( 
463 IDEN Out                                               l  
463 OPER , 
463 STR IDEN                                                
463 SPEC ) 
463 SPEC ; 

464 IDEN fprintf                                           l  
464 SPEC ( 
464 IDEN Out                                               l  
464 OPER , 
464 STR %s  \n                                              
464 OPER , 
464 IDEN       stringArray                                 l  
464 SPEC ) 
464 SPEC ; 

465 SPEC } 

466 IDEN break                                             l  
466 SPEC ; 

467 IDEN default                                           l  
467 SPEC : 

468 REWD while 
468 SPEC ( 
468 SPEC ( 
468 IDEN stringIn                                          l  
468 OPER [ 
468 IDEN x                                                 l  
468 OPER ] 
468 OPER > 
468 OPER = 
468 CHAR A  
468 OPER & 
468 OPER & 
468 IDEN stringIn                                          l  
468 OPER [ 
468 IDEN x                                                 l  
468 OPER ] 
468 OPER < 
468 OPER = 
468 CHAR Z  
468 SPEC ) 
468 OPER | 
468 OPER | 
468 SPEC ( 
468 IDEN stringIn                                          l  
468 OPER [ 
468 IDEN x                                                 l  
468 OPER ] 
468 OPER = 
468 OPER = 
468 CHAR _  
468 SPEC ) 
468 OPER | 
468 OPER | 
468 SPEC ( 
468 IDEN stringIn                                          l  
468 OPER [ 
468 IDEN x                                                 l  
468 OPER ] 
468 OPER > 
468 OPER = 
468 CHAR a  
468 OPER & 
468 OPER & 
468 IDEN stringIn                                          l  
468 OPER [ 
468 IDEN x                                                 l  
468 OPER ] 
468 OPER < 
468 OPER = 
468 CHAR z  
468 SPEC ) 
468 SPEC ) 
468 SPEC { 

469 IDEN stringArray                                       l  
469 OPER [ 
469 IDEN y                                                 l  
469 OPER ] 
469 OPER = 
469 IDEN stringIn                                          l  
469 OPER [ 
469 IDEN x                                                 l  
469 OPER ] 
469 SPEC ; 

470 IDEN y                                                 l  
470 OPER + 
470 OPER + 
470 SPEC ; 

471 IDEN x                                                 l  
471 OPER + 
471 OPER + 
471 SPEC ; 

472 SPEC } 

473 IDEN x                                                 l  
473 OPER - 
473 OPER - 
473 SPEC ; 

474 IDEN fprintf                                           l  
474 SPEC ( 
474 IDEN Out                                               l  
474 OPER , 
474 STR %d                                                  
474 OPER , 
474 IDEN    lineNo                                         l  
474 SPEC ) 
474 SPEC ; 

475 IDEN fprintf                                           l  
475 SPEC ( 
475 IDEN Out                                               l  
475 OPER , 
475 STR IDEN                                                
475 SPEC ) 
475 SPEC ; 

476 IDEN fprintf                                           l  
476 SPEC ( 
476 IDEN Out                                               l  
476 OPER , 
476 STR %s  \n                                              
476 OPER , 
476 IDEN       stringArray                                 l  
476 SPEC ) 
476 SPEC ; 

477 IDEN break                                             l  
477 SPEC ; 

478 SPEC } 

479 IDEN y                                                 l  
479 OPER = 
479 INTE 0                                                 l  
479 SPEC ; 

480 REWD int 
480 IDEN loop                                              l  
480 INTE 1                                                 l  
480 OPER = 
480 INTE 0                                                 l  
480 SPEC ; 

481 REWD while 
481 SPEC ( 
481 IDEN loop                                              l  
481 INTE 1                                                 l  
481 OPER < 
481 INTE 50                                                l  
481 SPEC ) 
481 SPEC { 

482 IDEN stringArray                                       l  
482 OPER [ 
482 IDEN loop                                              l  
482 INTE 1                                                 l  
482 OPER ] 
482 OPER = 
482 CHAR    
482 SPEC ; 

483 IDEN loop                                              l  
483 INTE 1                                                 l  
483 OPER + 
483 OPER + 
483 SPEC ; 

484 SPEC } 

485 IDEN break                                             l  
485 SPEC ; 

486 REWD case 
486 CHAR f  
486 SPEC : 

487 IDEN stringArray                                       l  
487 OPER [ 
487 IDEN y                                                 l  
487 OPER ] 
487 OPER = 
487 IDEN stringIn                                          l  
487 OPER [ 
487 IDEN x                                                 l  
487 OPER ] 
487 SPEC ; 

488 IDEN x                                                 l  
488 OPER + 
488 OPER + 
488 SPEC ; 

489 IDEN y                                                 l  
489 OPER + 
489 OPER + 
489 SPEC ; 

490 REWD switch 
490 IDEN swh                                               l  
490 IDEN swhh                                              l  
490 SPEC ( 
490 IDEN stringIn                                          l  
490 OPER [ 
490 IDEN x                                                 l  
490 OPER ] 
490 SPEC ) 
490 SPEC { 

491 REWD case 
491 CHAR o  
491 SPEC : 

492 IDEN stringArray                                       l  
492 OPER [ 
492 IDEN y                                                 l  
492 OPER ] 
492 OPER = 
492 IDEN stringIn                                          l  
492 OPER [ 
492 IDEN x                                                 l  
492 OPER ] 
492 SPEC ; 

493 IDEN x                                                 l  
493 OPER + 
493 OPER + 
493 SPEC ; 

494 IDEN y                                                 l  
494 OPER + 
494 OPER + 
494 SPEC ; 

495 REWD if 
495 SPEC ( 
495 IDEN stringIn                                          l  
495 OPER [ 
495 IDEN x                                                 l  
495 OPER ] 
495 OPER = 
495 OPER = 
495 CHAR r  
495 SPEC ) 
495 SPEC { 

496 IDEN fprintf                                           l  
496 SPEC ( 
496 IDEN Out                                               l  
496 OPER , 
496 STR %d                                                  
496 OPER , 
496 IDEN    lineNo                                         l  
496 SPEC ) 
496 SPEC ; 

497 IDEN fprintf                                           l  
497 SPEC ( 
497 IDEN Out                                               l  
497 OPER , 
497 STR REWD                                                
497 SPEC ) 
497 SPEC ; 

498 IDEN fprintf                                           l  
498 SPEC ( 
498 IDEN Out                                               l  
498 OPER , 
498 STR for \n                                              
498 SPEC ) 
498 SPEC ; 

499 SPEC } 

500 REWD else 
500 SPEC { 

501 REWD while 
501 SPEC ( 
501 SPEC ( 
501 IDEN stringIn                                          l  
501 OPER [ 
501 IDEN x                                                 l  
501 OPER ] 
501 OPER > 
501 OPER = 
501 CHAR A  
501 OPER & 
501 OPER & 
501 IDEN stringIn                                          l  
501 OPER [ 
501 IDEN x                                                 l  
501 OPER ] 
501 OPER < 
501 OPER = 
501 CHAR Z  
501 SPEC ) 
501 OPER | 
501 OPER | 
501 SPEC ( 
501 IDEN stringIn                                          l  
501 OPER [ 
501 IDEN x                                                 l  
501 OPER ] 
501 OPER = 
501 OPER = 
501 CHAR _  
501 SPEC ) 
501 OPER | 
501 OPER | 
501 SPEC ( 
501 IDEN stringIn                                          l  
501 OPER [ 
501 IDEN x                                                 l  
501 OPER ] 
501 OPER > 
501 OPER = 
501 CHAR a  
501 OPER & 
501 OPER & 
501 IDEN stringIn                                          l  
501 OPER [ 
501 IDEN x                                                 l  
501 OPER ] 
501 OPER < 
501 OPER = 
501 CHAR z  
501 SPEC ) 
501 SPEC ) 
501 SPEC { 

502 IDEN stringArray                                       l  
502 OPER [ 
502 IDEN y                                                 l  
502 OPER ] 
502 OPER = 
502 IDEN stringIn                                          l  
502 OPER [ 
502 IDEN x                                                 l  
502 OPER ] 
502 SPEC ; 

503 IDEN y                                                 l  
503 OPER + 
503 OPER + 
503 SPEC ; 

504 IDEN x                                                 l  
504 OPER + 
504 OPER + 
504 SPEC ; 

505 SPEC } 

506 IDEN x                                                 l  
506 OPER - 
506 OPER - 
506 SPEC ; 

507 IDEN fprintf                                           l  
507 SPEC ( 
507 IDEN Out                                               l  
507 OPER , 
507 STR %d                                                  
507 OPER , 
507 IDEN    lineNo                                         l  
507 SPEC ) 
507 SPEC ; 

508 IDEN fprintf                                           l  
508 SPEC ( 
508 IDEN Out                                               l  
508 OPER , 
508 STR IDEN                                                
508 SPEC ) 
508 SPEC ; 

509 IDEN fprintf                                           l  
509 SPEC ( 
509 IDEN Out                                               l  
509 OPER , 
509 STR %s  \n                                              
509 OPER , 
509 IDEN       stringArray                                 l  
509 SPEC ) 
509 SPEC ; 

510 SPEC } 

511 IDEN break                                             l  
511 SPEC ; 

512 REWD case 
512 CHAR l  
512 SPEC : 

513 IDEN stringArray                                       l  
513 OPER [ 
513 IDEN y                                                 l  
513 OPER ] 
513 OPER = 
513 IDEN stringIn                                          l  
513 OPER [ 
513 IDEN x                                                 l  
513 OPER ] 
513 SPEC ; 

514 IDEN x                                                 l  
514 OPER + 
514 OPER + 
514 SPEC ; 

515 IDEN y                                                 l  
515 OPER + 
515 OPER + 
515 SPEC ; 

516 REWD if 
516 SPEC ( 
516 SPEC ( 
516 IDEN stringIn                                          l  
516 OPER [ 
516 IDEN x                                                 l  
516 OPER ] 
516 OPER = 
516 OPER = 
516 CHAR o  
516 SPEC ) 
516 OPER & 
516 OPER & 
516 SPEC ( 
516 IDEN stringIn                                          l  
516 OPER [ 
516 IDEN x                                                 l  
516 OPER + 
516 INTE 1                                                 l  
516 OPER ] 
516 OPER = 
516 OPER = 
516 CHAR a  
516 SPEC ) 
516 OPER & 
516 OPER & 
516 SPEC ( 
516 IDEN stringIn                                          l  
516 OPER [ 
516 IDEN x                                                 l  
516 OPER + 
516 INTE 2                                                 l  
516 OPER ] 
516 OPER = 
516 OPER = 
516 CHAR t  
516 SPEC ) 
516 SPEC ) 
516 SPEC { 

517 IDEN x                                                 l  
517 OPER + 
517 OPER + 
517 SPEC ; 

518 IDEN x                                                 l  
518 OPER + 
518 OPER + 
518 SPEC ; 

519 IDEN fprintf                                           l  
519 SPEC ( 
519 IDEN Out                                               l  
519 OPER , 
519 STR %d                                                  
519 OPER , 
519 IDEN    lineNo                                         l  
519 SPEC ) 
519 SPEC ; 

520 IDEN fprintf                                           l  
520 SPEC ( 
520 IDEN Out                                               l  
520 OPER , 
520 STR REWD                                                
520 SPEC ) 
520 SPEC ; 

521 IDEN fprintf                                           l  
521 SPEC ( 
521 IDEN Out                                               l  
521 OPER , 
521 STR float \n                                            
521 SPEC ) 
521 SPEC ; 

522 SPEC } 

523 REWD else 
523 SPEC { 

524 REWD while 
524 SPEC ( 
524 SPEC ( 
524 IDEN stringIn                                          l  
524 OPER [ 
524 IDEN x                                                 l  
524 OPER ] 
524 OPER > 
524 OPER = 
524 CHAR A  
524 OPER & 
524 OPER & 
524 IDEN stringIn                                          l  
524 OPER [ 
524 IDEN x                                                 l  
524 OPER ] 
524 OPER < 
524 OPER = 
524 CHAR Z  
524 SPEC ) 
524 OPER | 
524 OPER | 
524 SPEC ( 
524 IDEN stringIn                                          l  
524 OPER [ 
524 IDEN x                                                 l  
524 OPER ] 
524 OPER = 
524 OPER = 
524 CHAR _  
524 SPEC ) 
524 OPER | 
524 OPER | 
524 SPEC ( 
524 IDEN stringIn                                          l  
524 OPER [ 
524 IDEN x                                                 l  
524 OPER ] 
524 OPER > 
524 OPER = 
524 CHAR a  
524 OPER & 
524 OPER & 
524 IDEN stringIn                                          l  
524 OPER [ 
524 IDEN x                                                 l  
524 OPER ] 
524 OPER < 
524 OPER = 
524 CHAR z  
524 SPEC ) 
524 SPEC ) 
524 SPEC { 

525 IDEN stringArray                                       l  
525 OPER [ 
525 IDEN y                                                 l  
525 OPER ] 
525 OPER = 
525 IDEN stringIn                                          l  
525 OPER [ 
525 IDEN x                                                 l  
525 OPER ] 
525 SPEC ; 

526 IDEN y                                                 l  
526 OPER + 
526 OPER + 
526 SPEC ; 

527 IDEN x                                                 l  
527 OPER + 
527 OPER + 
527 SPEC ; 

528 SPEC } 

529 IDEN x                                                 l  
529 OPER - 
529 OPER - 
529 SPEC ; 

530 IDEN fprintf                                           l  
530 SPEC ( 
530 IDEN Out                                               l  
530 OPER , 
530 STR %d                                                  
530 OPER , 
530 IDEN    lineNo                                         l  
530 SPEC ) 
530 SPEC ; 

531 IDEN fprintf                                           l  
531 SPEC ( 
531 IDEN Out                                               l  
531 OPER , 
531 STR IDEN                                                
531 SPEC ) 
531 SPEC ; 

532 IDEN fprintf                                           l  
532 SPEC ( 
532 IDEN Out                                               l  
532 OPER , 
532 STR %s  \n                                              
532 OPER , 
532 IDEN       stringArray                                 l  
532 SPEC ) 
532 SPEC ; 

533 SPEC } 

534 IDEN break                                             l  
534 SPEC ; 

535 IDEN default                                           l  
535 SPEC : 

536 REWD while 
536 SPEC ( 
536 SPEC ( 
536 IDEN stringIn                                          l  
536 OPER [ 
536 IDEN x                                                 l  
536 OPER ] 
536 OPER > 
536 OPER = 
536 CHAR A  
536 OPER & 
536 OPER & 
536 IDEN stringIn                                          l  
536 OPER [ 
536 IDEN x                                                 l  
536 OPER ] 
536 OPER < 
536 OPER = 
536 CHAR Z  
536 SPEC ) 
536 OPER | 
536 OPER | 
536 SPEC ( 
536 IDEN stringIn                                          l  
536 OPER [ 
536 IDEN x                                                 l  
536 OPER ] 
536 OPER = 
536 OPER = 
536 CHAR _  
536 SPEC ) 
536 OPER | 
536 OPER | 
536 SPEC ( 
536 IDEN stringIn                                          l  
536 OPER [ 
536 IDEN x                                                 l  
536 OPER ] 
536 OPER > 
536 OPER = 
536 CHAR a  
536 OPER & 
536 OPER & 
536 IDEN stringIn                                          l  
536 OPER [ 
536 IDEN x                                                 l  
536 OPER ] 
536 OPER < 
536 OPER = 
536 CHAR z  
536 SPEC ) 
536 SPEC ) 
536 SPEC { 

537 IDEN stringArray                                       l  
537 OPER [ 
537 IDEN y                                                 l  
537 OPER ] 
537 OPER = 
537 IDEN stringIn                                          l  
537 OPER [ 
537 IDEN x                                                 l  
537 OPER ] 
537 SPEC ; 

538 IDEN y                                                 l  
538 OPER + 
538 OPER + 
538 SPEC ; 

539 IDEN x                                                 l  
539 OPER + 
539 OPER + 
539 SPEC ; 

540 SPEC } 

541 IDEN x                                                 l  
541 OPER - 
541 OPER - 
541 SPEC ; 

542 IDEN fprintf                                           l  
542 SPEC ( 
542 IDEN Out                                               l  
542 OPER , 
542 STR %d                                                  
542 OPER , 
542 IDEN    lineNo                                         l  
542 SPEC ) 
542 SPEC ; 

543 IDEN fprintf                                           l  
543 SPEC ( 
543 IDEN Out                                               l  
543 OPER , 
543 STR IDEN                                                
543 SPEC ) 
543 SPEC ; 

544 IDEN fprintf                                           l  
544 SPEC ( 
544 IDEN Out                                               l  
544 OPER , 
544 STR %s  \n                                              
544 OPER , 
544 IDEN       stringArray                                 l  
544 SPEC ) 
544 SPEC ; 

545 IDEN break                                             l  
545 SPEC ; 

546 SPEC } 

547 IDEN y                                                 l  
547 OPER = 
547 INTE 0                                                 l  
547 SPEC ; 

548 REWD int 
548 IDEN loop                                              l  
548 INTE 4                                                 l  
548 OPER = 
548 INTE 0                                                 l  
548 SPEC ; 

549 REWD while 
549 SPEC ( 
549 IDEN loop                                              l  
549 INTE 4                                                 l  
549 OPER < 
549 INTE 50                                                l  
549 SPEC ) 
549 SPEC { 

550 IDEN stringArray                                       l  
550 OPER [ 
550 IDEN loop                                              l  
550 INTE 4                                                 l  
550 OPER ] 
550 OPER = 
550 CHAR    
550 SPEC ; 

551 IDEN loop                                              l  
551 INTE 4                                                 l  
551 OPER + 
551 OPER + 
551 SPEC ; 

552 SPEC } 

553 IDEN break                                             l  
553 SPEC ; 

554 REWD case 
554 CHAR s  
554 SPEC : 

555 IDEN stringArray                                       l  
555 OPER [ 
555 IDEN y                                                 l  
555 OPER ] 
555 OPER = 
555 IDEN stringIn                                          l  
555 OPER [ 
555 IDEN x                                                 l  
555 OPER ] 
555 SPEC ; 

556 IDEN x                                                 l  
556 OPER + 
556 OPER + 
556 SPEC ; 

557 IDEN y                                                 l  
557 OPER + 
557 OPER + 
557 SPEC ; 

558 REWD switch 
558 IDEN swh                                               l  
558 IDEN swhh                                              l  
558 SPEC ( 
558 IDEN stringIn                                          l  
558 OPER [ 
558 IDEN x                                                 l  
558 OPER ] 
558 SPEC ) 
558 SPEC { 

559 REWD case 
559 CHAR w  
559 SPEC : 

560 IDEN stringArray                                       l  
560 OPER [ 
560 IDEN y                                                 l  
560 OPER ] 
560 OPER = 
560 IDEN stringIn                                          l  
560 OPER [ 
560 IDEN x                                                 l  
560 OPER ] 
560 SPEC ; 

561 IDEN x                                                 l  
561 OPER + 
561 OPER + 
561 SPEC ; 

562 IDEN y                                                 l  
562 OPER + 
562 OPER + 
562 SPEC ; 

563 REWD if 
563 SPEC ( 
563 SPEC ( 
563 IDEN stringIn                                          l  
563 OPER [ 
563 IDEN x                                                 l  
563 OPER ] 
563 OPER = 
563 OPER = 
563 CHAR i  
563 SPEC ) 
563 OPER & 
563 OPER & 
563 SPEC ( 
563 IDEN stringIn                                          l  
563 OPER [ 
563 IDEN x                                                 l  
563 OPER + 
563 INTE 1                                                 l  
563 OPER ] 
563 OPER = 
563 OPER = 
563 CHAR t  
563 SPEC ) 
563 OPER & 
563 OPER & 
563 SPEC ( 
563 IDEN stringIn                                          l  
563 OPER [ 
563 IDEN x                                                 l  
563 OPER + 
563 INTE 2                                                 l  
563 OPER ] 
563 OPER = 
563 OPER = 
563 CHAR c  
563 SPEC ) 
563 OPER & 
563 OPER & 
563 SPEC ( 
563 IDEN stringIn                                          l  
563 OPER [ 
563 IDEN x                                                 l  
563 OPER + 
563 INTE 3                                                 l  
563 OPER ] 
563 OPER = 
563 OPER = 
563 CHAR h  
563 SPEC ) 
563 SPEC ) 
563 SPEC { 

564 IDEN x                                                 l  
564 OPER + 
564 OPER + 
564 SPEC ; 

565 IDEN x                                                 l  
565 OPER + 
565 OPER + 
565 SPEC ; 

566 IDEN x                                                 l  
566 OPER + 
566 OPER + 
566 SPEC ; 

567 IDEN fprintf                                           l  
567 SPEC ( 
567 IDEN Out                                               l  
567 OPER , 
567 STR %d                                                  
567 OPER , 
567 IDEN    lineNo                                         l  
567 SPEC ) 
567 SPEC ; 

568 IDEN fprintf                                           l  
568 SPEC ( 
568 IDEN Out                                               l  
568 OPER , 
568 STR REWD                                                
568 SPEC ) 
568 SPEC ; 

569 IDEN fprintf                                           l  
569 SPEC ( 
569 IDEN Out                                               l  
569 OPER , 
569 STR switch \n                                           
569 SPEC ) 
569 SPEC ; 

570 SPEC } 

571 REWD else 
571 SPEC { 

572 REWD while 
572 SPEC ( 
572 SPEC ( 
572 IDEN stringIn                                          l  
572 OPER [ 
572 IDEN x                                                 l  
572 OPER ] 
572 OPER > 
572 OPER = 
572 CHAR A  
572 OPER & 
572 OPER & 
572 IDEN stringIn                                          l  
572 OPER [ 
572 IDEN x                                                 l  
572 OPER ] 
572 OPER < 
572 OPER = 
572 CHAR Z  
572 SPEC ) 
572 OPER | 
572 OPER | 
572 SPEC ( 
572 IDEN stringIn                                          l  
572 OPER [ 
572 IDEN x                                                 l  
572 OPER ] 
572 OPER = 
572 OPER = 
572 CHAR _  
572 SPEC ) 
572 OPER | 
572 OPER | 
572 SPEC ( 
572 IDEN stringIn                                          l  
572 OPER [ 
572 IDEN x                                                 l  
572 OPER ] 
572 OPER > 
572 OPER = 
572 CHAR a  
572 OPER & 
572 OPER & 
572 IDEN stringIn                                          l  
572 OPER [ 
572 IDEN x                                                 l  
572 OPER ] 
572 OPER < 
572 OPER = 
572 CHAR z  
572 SPEC ) 
572 SPEC ) 
572 SPEC { 

573 IDEN stringArray                                       l  
573 OPER [ 
573 IDEN y                                                 l  
573 OPER ] 
573 OPER = 
573 IDEN stringIn                                          l  
573 OPER [ 
573 IDEN x                                                 l  
573 OPER ] 
573 SPEC ; 

574 IDEN y                                                 l  
574 OPER + 
574 OPER + 
574 SPEC ; 

575 IDEN x                                                 l  
575 OPER + 
575 OPER + 
575 SPEC ; 

576 SPEC } 

577 IDEN x                                                 l  
577 OPER - 
577 OPER - 
577 SPEC ; 

578 IDEN fprintf                                           l  
578 SPEC ( 
578 IDEN Out                                               l  
578 OPER , 
578 STR %d                                                  
578 OPER , 
578 IDEN    lineNo                                         l  
578 SPEC ) 
578 SPEC ; 

579 IDEN fprintf                                           l  
579 SPEC ( 
579 IDEN Out                                               l  
579 OPER , 
579 STR IDEN                                                
579 SPEC ) 
579 SPEC ; 

580 IDEN fprintf                                           l  
580 SPEC ( 
580 IDEN Out                                               l  
580 OPER , 
580 STR %s  \n                                              
580 OPER , 
580 IDEN       stringArray                                 l  
580 SPEC ) 
580 SPEC ; 

581 SPEC } 

582 IDEN break                                             l  
582 SPEC ; 


584 SPEC } 

585 REWD switch 
585 IDEN swh                                               l  
585 IDEN swhh                                              l  
585 SPEC ( 
585 IDEN stringIn                                          l  
585 OPER [ 
585 IDEN x                                                 l  
585 OPER ] 
585 SPEC ) 
585 SPEC { 

586 REWD case 
586 CHAR h  
586 SPEC : 

587 IDEN stringArray                                       l  
587 OPER [ 
587 IDEN y                                                 l  
587 OPER ] 
587 OPER = 
587 IDEN stringIn                                          l  
587 OPER [ 
587 IDEN x                                                 l  
587 OPER ] 
587 SPEC ; 

588 IDEN x                                                 l  
588 OPER + 
588 OPER + 
588 SPEC ; 

589 IDEN y                                                 l  
589 OPER + 
589 OPER + 
589 SPEC ; 

590 REWD if 
590 SPEC ( 
590 SPEC ( 
590 IDEN stringIn                                          l  
590 OPER [ 
590 IDEN x                                                 l  
590 OPER ] 
590 OPER = 
590 OPER = 
590 CHAR o  
590 SPEC ) 
590 OPER & 
590 OPER & 
590 SPEC ( 
590 IDEN stringIn                                          l  
590 OPER [ 
590 IDEN x                                                 l  
590 OPER + 
590 INTE 1                                                 l  
590 OPER ] 
590 OPER = 
590 OPER = 
590 CHAR r  
590 SPEC ) 
590 OPER & 
590 OPER & 
590 SPEC ( 
590 IDEN stringIn                                          l  
590 OPER [ 
590 IDEN x                                                 l  
590 OPER + 
590 INTE 2                                                 l  
590 OPER ] 
590 OPER = 
590 OPER = 
590 CHAR t  
590 SPEC ) 
590 SPEC ) 
590 SPEC { 

591 IDEN x                                                 l  
591 OPER + 
591 OPER + 
591 SPEC ; 

592 IDEN x                                                 l  
592 OPER + 
592 OPER + 
592 SPEC ; 

593 IDEN x                                                 l  
593 OPER + 
593 OPER + 
593 SPEC ; 

594 IDEN fprintf                                           l  
594 SPEC ( 
594 IDEN Out                                               l  
594 OPER , 
594 STR %d                                                  
594 OPER , 
594 IDEN    lineNo                                         l  
594 SPEC ) 
594 SPEC ; 

595 IDEN fprintf                                           l  
595 SPEC ( 
595 IDEN Out                                               l  
595 OPER , 
595 STR REWD                                                
595 SPEC ) 
595 SPEC ; 

596 IDEN fprintf                                           l  
596 SPEC ( 
596 IDEN Out                                               l  
596 OPER , 
596 STR short \n                                            
596 SPEC ) 
596 SPEC ; 

597 SPEC } 

598 REWD else 
598 SPEC { 

599 REWD while 
599 SPEC ( 
599 SPEC ( 
599 IDEN stringIn                                          l  
599 OPER [ 
599 IDEN x                                                 l  
599 OPER ] 
599 OPER > 
599 OPER = 
599 CHAR A  
599 OPER & 
599 OPER & 
599 IDEN stringIn                                          l  
599 OPER [ 
599 IDEN x                                                 l  
599 OPER ] 
599 OPER < 
599 OPER = 
599 CHAR Z  
599 SPEC ) 
599 OPER | 
599 OPER | 
599 SPEC ( 
599 IDEN stringIn                                          l  
599 OPER [ 
599 IDEN x                                                 l  
599 OPER ] 
599 OPER = 
599 OPER = 
599 CHAR _  
599 SPEC ) 
599 OPER | 
599 OPER | 
599 SPEC ( 
599 IDEN stringIn                                          l  
599 OPER [ 
599 IDEN x                                                 l  
599 OPER ] 
599 OPER > 
599 OPER = 
599 CHAR a  
599 OPER & 
599 OPER & 
599 IDEN stringIn                                          l  
599 OPER [ 
599 IDEN x                                                 l  
599 OPER ] 
599 OPER < 
599 OPER = 
599 CHAR z  
599 SPEC ) 
599 SPEC ) 
599 SPEC { 

600 IDEN stringArray                                       l  
600 OPER [ 
600 IDEN y                                                 l  
600 OPER ] 
600 OPER = 
600 IDEN stringIn                                          l  
600 OPER [ 
600 IDEN x                                                 l  
600 OPER ] 
600 SPEC ; 

601 IDEN y                                                 l  
601 OPER + 
601 OPER + 
601 SPEC ; 

602 IDEN x                                                 l  
602 OPER + 
602 OPER + 
602 SPEC ; 

603 SPEC } 

604 IDEN x                                                 l  
604 OPER - 
604 OPER - 
604 SPEC ; 

605 IDEN fprintf                                           l  
605 SPEC ( 
605 IDEN Out                                               l  
605 OPER , 
605 STR %d                                                  
605 OPER , 
605 IDEN    lineNo                                         l  
605 SPEC ) 
605 SPEC ; 

606 IDEN fprintf                                           l  
606 SPEC ( 
606 IDEN Out                                               l  
606 OPER , 
606 STR IDEN                                                
606 SPEC ) 
606 SPEC ; 

607 IDEN fprintf                                           l  
607 SPEC ( 
607 IDEN Out                                               l  
607 OPER , 
607 STR %s  \n                                              
607 OPER , 
607 IDEN       stringArray                                 l  
607 SPEC ) 
607 SPEC ; 

608 SPEC } 

609 IDEN break                                             l  
609 SPEC ; 

610 SPEC } 

611 REWD switch 
611 IDEN swh                                               l  
611 IDEN swhh                                              l  
611 SPEC ( 
611 IDEN stringIn                                          l  
611 OPER [ 
611 IDEN x                                                 l  
611 OPER ] 
611 SPEC ) 
611 SPEC { 

612 REWD case 
612 CHAR i  
612 SPEC : 

613 IDEN stringArray                                       l  
613 OPER [ 
613 IDEN y                                                 l  
613 OPER ] 
613 OPER = 
613 IDEN stringIn                                          l  
613 OPER [ 
613 IDEN x                                                 l  
613 OPER ] 
613 SPEC ; 

614 IDEN x                                                 l  
614 OPER + 
614 OPER + 
614 SPEC ; 

615 IDEN y                                                 l  
615 OPER + 
615 OPER + 
615 SPEC ; 

616 REWD if 
616 SPEC ( 
616 SPEC ( 
616 IDEN stringIn                                          l  
616 OPER [ 
616 IDEN x                                                 l  
616 OPER ] 
616 OPER = 
616 OPER = 
616 CHAR g  
616 SPEC ) 
616 OPER & 
616 OPER & 
616 SPEC ( 
616 IDEN stringIn                                          l  
616 OPER [ 
616 IDEN x                                                 l  
616 OPER + 
616 INTE 1                                                 l  
616 OPER ] 
616 OPER = 
616 OPER = 
616 CHAR n  
616 SPEC ) 
616 OPER & 
616 OPER & 
616 SPEC ( 
616 IDEN stringIn                                          l  
616 OPER [ 
616 IDEN x                                                 l  
616 OPER + 
616 INTE 2                                                 l  
616 OPER ] 
616 OPER = 
616 OPER = 
616 CHAR e  
616 SPEC ) 
616 OPER & 
616 OPER & 
616 SPEC ( 
616 IDEN stringIn                                          l  
616 OPER [ 
616 IDEN x                                                 l  
616 OPER + 
616 INTE 3                                                 l  
616 OPER ] 
616 OPER = 
616 OPER = 
616 CHAR d  
616 SPEC ) 
616 SPEC ) 
616 SPEC { 

617 IDEN x                                                 l  
617 OPER + 
617 OPER + 
617 SPEC ; 

618 IDEN x                                                 l  
618 OPER + 
618 OPER + 
618 SPEC ; 

619 IDEN x                                                 l  
619 OPER + 
619 OPER + 
619 SPEC ; 

620 IDEN fprintf                                           l  
620 SPEC ( 
620 IDEN Out                                               l  
620 OPER , 
620 STR %d                                                  
620 OPER , 
620 IDEN    lineNo                                         l  
620 SPEC ) 
620 SPEC ; 

621 IDEN fprintf                                           l  
621 SPEC ( 
621 IDEN Out                                               l  
621 OPER , 
621 STR REWD                                                
621 SPEC ) 
621 SPEC ; 

622 IDEN fprintf                                           l  
622 SPEC ( 
622 IDEN Out                                               l  
622 OPER , 
622 STR signed \n                                           
622 SPEC ) 
622 SPEC ; 

623 SPEC } 

624 REWD else 
624 SPEC { 

625 REWD while 
625 SPEC ( 
625 SPEC ( 
625 IDEN stringIn                                          l  
625 OPER [ 
625 IDEN x                                                 l  
625 OPER ] 
625 OPER > 
625 OPER = 
625 CHAR A  
625 OPER & 
625 OPER & 
625 IDEN stringIn                                          l  
625 OPER [ 
625 IDEN x                                                 l  
625 OPER ] 
625 OPER < 
625 OPER = 
625 CHAR Z  
625 SPEC ) 
625 OPER | 
625 OPER | 
625 SPEC ( 
625 IDEN stringIn                                          l  
625 OPER [ 
625 IDEN x                                                 l  
625 OPER ] 
625 OPER = 
625 OPER = 
625 CHAR _  
625 SPEC ) 
625 OPER | 
625 OPER | 
625 SPEC ( 
625 IDEN stringIn                                          l  
625 OPER [ 
625 IDEN x                                                 l  
625 OPER ] 
625 OPER > 
625 OPER = 
625 CHAR a  
625 OPER & 
625 OPER & 
625 IDEN stringIn                                          l  
625 OPER [ 
625 IDEN x                                                 l  
625 OPER ] 
625 OPER < 
625 OPER = 
625 CHAR z  
625 SPEC ) 
625 SPEC ) 
625 SPEC { 

626 IDEN stringArray                                       l  
626 OPER [ 
626 IDEN y                                                 l  
626 OPER ] 
626 OPER = 
626 IDEN stringIn                                          l  
626 OPER [ 
626 IDEN x                                                 l  
626 OPER ] 
626 SPEC ; 

627 IDEN y                                                 l  
627 OPER + 
627 OPER + 
627 SPEC ; 

628 IDEN x                                                 l  
628 OPER + 
628 OPER + 
628 SPEC ; 

629 SPEC } 

630 IDEN x                                                 l  
630 OPER - 
630 OPER - 
630 SPEC ; 

631 IDEN fprintf                                           l  
631 SPEC ( 
631 IDEN Out                                               l  
631 OPER , 
631 STR %d                                                  
631 OPER , 
631 IDEN    lineNo                                         l  
631 SPEC ) 
631 SPEC ; 

632 IDEN fprintf                                           l  
632 SPEC ( 
632 IDEN Out                                               l  
632 OPER , 
632 STR IDEN                                                
632 SPEC ) 
632 SPEC ; 

633 IDEN fprintf                                           l  
633 SPEC ( 
633 IDEN Out                                               l  
633 OPER , 
633 STR %s  \n                                              
633 OPER , 
633 IDEN       stringArray                                 l  
633 SPEC ) 
633 SPEC ; 

634 SPEC } 

635 IDEN break                                             l  
635 SPEC ; 

636 IDEN default                                           l  
636 SPEC : 

637 REWD while 
637 SPEC ( 
637 SPEC ( 
637 IDEN stringIn                                          l  
637 OPER [ 
637 IDEN x                                                 l  
637 OPER ] 
637 OPER > 
637 OPER = 
637 CHAR A  
637 OPER & 
637 OPER & 
637 IDEN stringIn                                          l  
637 OPER [ 
637 IDEN x                                                 l  
637 OPER ] 
637 OPER < 
637 OPER = 
637 CHAR Z  
637 SPEC ) 
637 OPER | 
637 OPER | 
637 SPEC ( 
637 IDEN stringIn                                          l  
637 OPER [ 
637 IDEN x                                                 l  
637 OPER ] 
637 OPER = 
637 OPER = 
637 CHAR _  
637 SPEC ) 
637 OPER | 
637 OPER | 
637 SPEC ( 
637 IDEN stringIn                                          l  
637 OPER [ 
637 IDEN x                                                 l  
637 OPER ] 
637 OPER > 
637 OPER = 
637 CHAR a  
637 OPER & 
637 OPER & 
637 IDEN stringIn                                          l  
637 OPER [ 
637 IDEN x                                                 l  
637 OPER ] 
637 OPER < 
637 OPER = 
637 CHAR z  
637 SPEC ) 
637 SPEC ) 
637 SPEC { 

638 IDEN stringArray                                       l  
638 OPER [ 
638 IDEN y                                                 l  
638 OPER ] 
638 OPER = 
638 IDEN stringIn                                          l  
638 OPER [ 
638 IDEN x                                                 l  
638 OPER ] 
638 SPEC ; 

639 IDEN y                                                 l  
639 OPER + 
639 OPER + 
639 SPEC ; 

640 IDEN x                                                 l  
640 OPER + 
640 OPER + 
640 SPEC ; 

641 SPEC } 

642 IDEN x                                                 l  
642 OPER - 
642 OPER - 
642 SPEC ; 

643 IDEN fprintf                                           l  
643 SPEC ( 
643 IDEN Out                                               l  
643 OPER , 
643 STR %d                                                  
643 OPER , 
643 IDEN    lineNo                                         l  
643 SPEC ) 
643 SPEC ; 

644 IDEN fprintf                                           l  
644 SPEC ( 
644 IDEN Out                                               l  
644 OPER , 
644 STR IDEN                                                
644 SPEC ) 
644 SPEC ; 

645 IDEN fprintf                                           l  
645 SPEC ( 
645 IDEN Out                                               l  
645 OPER , 
645 STR %s  \n                                              
645 OPER , 
645 IDEN       stringArray                                 l  
645 SPEC ) 
645 SPEC ; 

646 IDEN break                                             l  
646 SPEC ; 

647 SPEC } 

648 IDEN y                                                 l  
648 OPER = 
648 INTE 0                                                 l  
648 SPEC ; 

649 REWD int 
649 IDEN loop                                              l  
649 INTE 6                                                 l  
649 OPER = 
649 INTE 0                                                 l  
649 SPEC ; 

650 REWD while 
650 SPEC ( 
650 IDEN loop                                              l  
650 INTE 6                                                 l  
650 OPER < 
650 INTE 50                                                l  
650 SPEC ) 
650 SPEC { 

651 IDEN stringArray                                       l  
651 OPER [ 
651 IDEN loop                                              l  
651 INTE 6                                                 l  
651 OPER ] 
651 OPER = 
651 CHAR    
651 SPEC ; 

652 IDEN loop                                              l  
652 INTE 6                                                 l  
652 OPER + 
652 OPER + 
652 SPEC ; 

653 SPEC } 

654 IDEN break                                             l  
654 SPEC ; 

655 REWD case 
655 CHAR d  
655 SPEC : 

656 IDEN stringArray                                       l  
656 OPER [ 
656 IDEN y                                                 l  
656 OPER ] 
656 OPER = 
656 IDEN stringIn                                          l  
656 OPER [ 
656 IDEN x                                                 l  
656 OPER ] 
656 SPEC ; 

657 IDEN x                                                 l  
657 OPER + 
657 OPER + 
657 SPEC ; 

658 IDEN y                                                 l  
658 OPER + 
658 OPER + 
658 SPEC ; 

659 REWD switch 
659 IDEN swh                                               l  
659 IDEN swhh                                              l  
659 SPEC ( 
659 IDEN stringIn                                          l  
659 OPER [ 
659 IDEN x                                                 l  
659 OPER ] 
659 SPEC ) 
659 SPEC { 

660 REWD case 
660 CHAR o  
660 SPEC : 

661 REWD if 
661 SPEC ( 
661 SPEC ( 
661 IDEN stringIn                                          l  
661 OPER [ 
661 IDEN x                                                 l  
661 OPER + 
661 INTE 1                                                 l  
661 OPER ] 
661 OPER = 
661 OPER = 
661 CHAR u  
661 SPEC ) 
661 OPER & 
661 OPER & 
661 SPEC ( 
661 IDEN stringIn                                          l  
661 OPER [ 
661 IDEN x                                                 l  
661 OPER + 
661 INTE 2                                                 l  
661 OPER ] 
661 OPER = 
661 OPER = 
661 CHAR b  
661 SPEC ) 
661 OPER & 
661 OPER & 
661 SPEC ( 
661 IDEN stringIn                                          l  
661 OPER [ 
661 IDEN x                                                 l  
661 OPER + 
661 INTE 3                                                 l  
661 OPER ] 
661 OPER = 
661 OPER = 
661 CHAR l  
661 SPEC ) 
661 OPER & 
661 OPER & 
661 SPEC ( 
661 IDEN stringIn                                          l  
661 OPER [ 
661 IDEN x                                                 l  
661 OPER + 
661 INTE 4                                                 l  
661 OPER ] 
661 OPER = 
661 OPER = 
661 CHAR e  
661 SPEC ) 
661 SPEC ) 
661 SPEC { 

662 IDEN x                                                 l  
662 OPER + 
662 OPER + 
662 SPEC ; 

663 IDEN x                                                 l  
663 OPER + 
663 OPER + 
663 SPEC ; 

664 IDEN x                                                 l  
664 OPER + 
664 OPER + 
664 SPEC ; 

665 IDEN x                                                 l  
665 OPER + 
665 OPER + 
665 SPEC ; 

666 IDEN fprintf                                           l  
666 SPEC ( 
666 IDEN Out                                               l  
666 OPER , 
666 STR %d                                                  
666 OPER , 
666 IDEN    lineNo                                         l  
666 SPEC ) 
666 SPEC ; 

667 IDEN fprintf                                           l  
667 SPEC ( 
667 IDEN Out                                               l  
667 OPER , 
667 STR REWD                                                
667 SPEC ) 
667 SPEC ; 

668 IDEN fprintf                                           l  
668 SPEC ( 
668 IDEN Out                                               l  
668 OPER , 
668 STR double \n                                           
668 SPEC ) 
668 SPEC ; 

669 SPEC } 

670 REWD else 
670 SPEC { 

671 IDEN fprintf                                           l  
671 SPEC ( 
671 IDEN Out                                               l  
671 OPER , 
671 STR %d                                                  
671 OPER , 
671 IDEN    lineNo                                         l  
671 SPEC ) 
671 SPEC ; 

672 IDEN fprintf                                           l  
672 SPEC ( 
672 IDEN Out                                               l  
672 OPER , 
672 STR REWD                                                
672 SPEC ) 
672 SPEC ; 

673 IDEN fprintf                                           l  
673 SPEC ( 
673 IDEN Out                                               l  
673 OPER , 
673 STR do \n                                               
673 SPEC ) 
673 SPEC ; 

674 SPEC } 

675 IDEN break                                             l  
675 SPEC ; 

676 IDEN default                                           l  
676 SPEC : 

677 REWD while 
677 SPEC ( 
677 SPEC ( 
677 IDEN stringIn                                          l  
677 OPER [ 
677 IDEN x                                                 l  
677 OPER ] 
677 OPER > 
677 OPER = 
677 CHAR A  
677 OPER & 
677 OPER & 
677 IDEN stringIn                                          l  
677 OPER [ 
677 IDEN x                                                 l  
677 OPER ] 
677 OPER < 
677 OPER = 
677 CHAR Z  
677 SPEC ) 
677 OPER | 
677 OPER | 
677 SPEC ( 
677 IDEN stringIn                                          l  
677 OPER [ 
677 IDEN x                                                 l  
677 OPER ] 
677 OPER = 
677 OPER = 
677 CHAR _  
677 SPEC ) 
677 OPER | 
677 OPER | 
677 SPEC ( 
677 IDEN stringIn                                          l  
677 OPER [ 
677 IDEN x                                                 l  
677 OPER ] 
677 OPER > 
677 OPER = 
677 CHAR a  
677 OPER & 
677 OPER & 
677 IDEN stringIn                                          l  
677 OPER [ 
677 IDEN x                                                 l  
677 OPER ] 
677 OPER < 
677 OPER = 
677 CHAR z  
677 SPEC ) 
677 SPEC ) 
677 SPEC { 

678 IDEN stringArray                                       l  
678 OPER [ 
678 IDEN y                                                 l  
678 OPER ] 
678 OPER = 
678 IDEN stringIn                                          l  
678 OPER [ 
678 IDEN x                                                 l  
678 OPER ] 
678 SPEC ; 

679 IDEN y                                                 l  
679 OPER + 
679 OPER + 
679 SPEC ; 

680 IDEN x                                                 l  
680 OPER + 
680 OPER + 
680 SPEC ; 

681 SPEC } 

682 IDEN x                                                 l  
682 OPER - 
682 OPER - 
682 SPEC ; 

683 IDEN fprintf                                           l  
683 SPEC ( 
683 IDEN Out                                               l  
683 OPER , 
683 STR %d                                                  
683 OPER , 
683 IDEN    lineNo                                         l  
683 SPEC ) 
683 SPEC ; 

684 IDEN fprintf                                           l  
684 SPEC ( 
684 IDEN Out                                               l  
684 OPER , 
684 STR IDEN                                                
684 SPEC ) 
684 SPEC ; 

685 IDEN fprintf                                           l  
685 SPEC ( 
685 IDEN Out                                               l  
685 OPER , 
685 STR %s  \n                                              
685 OPER , 
685 IDEN       stringArray                                 l  
685 SPEC ) 
685 SPEC ; 

686 IDEN break                                             l  
686 SPEC ; 

687 SPEC } 

688 IDEN y                                                 l  
688 OPER = 
688 INTE 0                                                 l  
688 SPEC ; 

689 REWD int 
689 IDEN loop                                              l  
689 INTE 5                                                 l  
689 OPER = 
689 INTE 0                                                 l  
689 SPEC ; 

690 REWD while 
690 SPEC ( 
690 IDEN loop                                              l  
690 INTE 5                                                 l  
690 OPER < 
690 INTE 50                                                l  
690 SPEC ) 
690 SPEC { 

691 IDEN stringArray                                       l  
691 OPER [ 
691 IDEN loop                                              l  
691 INTE 5                                                 l  
691 OPER ] 
691 OPER = 
691 CHAR    
691 SPEC ; 

692 IDEN loop                                              l  
692 INTE 5                                                 l  
692 OPER + 
692 OPER + 
692 SPEC ; 

693 SPEC } 

694 IDEN break                                             l  
694 SPEC ; 

695 REWD case 
695 CHAR c  
695 SPEC : 

696 IDEN stringArray                                       l  
696 OPER [ 
696 IDEN y                                                 l  
696 OPER ] 
696 OPER = 
696 IDEN stringIn                                          l  
696 OPER [ 
696 IDEN x                                                 l  
696 OPER ] 
696 SPEC ; 

697 IDEN x                                                 l  
697 OPER + 
697 OPER + 
697 SPEC ; 

698 IDEN y                                                 l  
698 OPER + 
698 OPER + 
698 SPEC ; 

699 REWD switch 
699 IDEN swh                                               l  
699 IDEN swhh                                              l  
699 SPEC ( 
699 IDEN stringIn                                          l  
699 OPER [ 
699 IDEN x                                                 l  
699 OPER ] 
699 SPEC ) 
699 SPEC { 

700 REWD case 
700 CHAR o  
700 SPEC : 

701 IDEN stringArray                                       l  
701 OPER [ 
701 IDEN y                                                 l  
701 OPER ] 
701 OPER = 
701 IDEN stringIn                                          l  
701 OPER [ 
701 IDEN x                                                 l  
701 OPER ] 
701 SPEC ; 

702 IDEN x                                                 l  
702 OPER + 
702 OPER + 
702 SPEC ; 

703 IDEN y                                                 l  
703 OPER + 
703 OPER + 
703 SPEC ; 

704 REWD if 
704 SPEC ( 
704 SPEC ( 
704 IDEN stringIn                                          l  
704 OPER [ 
704 IDEN x                                                 l  
704 OPER ] 
704 OPER = 
704 OPER = 
704 CHAR n  
704 SPEC ) 
704 OPER & 
704 OPER & 
704 SPEC ( 
704 IDEN stringIn                                          l  
704 OPER [ 
704 IDEN x                                                 l  
704 OPER + 
704 INTE 1                                                 l  
704 OPER ] 
704 OPER = 
704 OPER = 
704 CHAR s  
704 SPEC ) 
704 OPER & 
704 OPER & 
704 SPEC ( 
704 IDEN stringIn                                          l  
704 OPER [ 
704 IDEN x                                                 l  
704 OPER + 
704 INTE 2                                                 l  
704 OPER ] 
704 OPER = 
704 OPER = 
704 CHAR t  
704 SPEC ) 
704 SPEC ) 
704 SPEC { 

705 IDEN x                                                 l  
705 OPER + 
705 OPER + 
705 SPEC ; 

706 IDEN fprintf                                           l  
706 SPEC ( 
706 IDEN Out                                               l  
706 OPER , 
706 STR %d                                                  
706 OPER , 
706 IDEN    lineNo                                         l  
706 SPEC ) 
706 SPEC ; 

707 IDEN fprintf                                           l  
707 SPEC ( 
707 IDEN Out                                               l  
707 OPER , 
707 STR REWD                                                
707 SPEC ) 
707 SPEC ; 

708 IDEN fprintf                                           l  
708 SPEC ( 
708 IDEN Out                                               l  
708 OPER , 
708 STR const \n                                            
708 SPEC ) 
708 SPEC ; 

709 SPEC } 

710 REWD else 
710 SPEC { 

711 REWD while 
711 SPEC ( 
711 SPEC ( 
711 IDEN stringIn                                          l  
711 OPER [ 
711 IDEN x                                                 l  
711 OPER ] 
711 OPER > 
711 OPER = 
711 CHAR A  
711 OPER & 
711 OPER & 
711 IDEN stringIn                                          l  
711 OPER [ 
711 IDEN x                                                 l  
711 OPER ] 
711 OPER < 
711 OPER = 
711 CHAR Z  
711 SPEC ) 
711 OPER | 
711 OPER | 
711 SPEC ( 
711 IDEN stringIn                                          l  
711 OPER [ 
711 IDEN x                                                 l  
711 OPER ] 
711 OPER = 
711 OPER = 
711 CHAR _  
711 SPEC ) 
711 OPER | 
711 OPER | 
711 SPEC ( 
711 IDEN stringIn                                          l  
711 OPER [ 
711 IDEN x                                                 l  
711 OPER ] 
711 OPER > 
711 OPER = 
711 CHAR a  
711 OPER & 
711 OPER & 
711 IDEN stringIn                                          l  
711 OPER [ 
711 IDEN x                                                 l  
711 OPER ] 
711 OPER < 
711 OPER = 
711 CHAR z  
711 SPEC ) 
711 SPEC ) 
711 SPEC { 

712 IDEN stringArray                                       l  
712 OPER [ 
712 IDEN y                                                 l  
712 OPER ] 
712 OPER = 
712 IDEN stringIn                                          l  
712 OPER [ 
712 IDEN x                                                 l  
712 OPER ] 
712 SPEC ; 

713 IDEN y                                                 l  
713 OPER + 
713 OPER + 
713 SPEC ; 

714 IDEN x                                                 l  
714 OPER + 
714 OPER + 
714 SPEC ; 

715 SPEC } 

716 IDEN x                                                 l  
716 OPER - 
716 OPER - 
716 SPEC ; 

717 IDEN fprintf                                           l  
717 SPEC ( 
717 IDEN Out                                               l  
717 OPER , 
717 STR %d                                                  
717 OPER , 
717 IDEN    lineNo                                         l  
717 SPEC ) 
717 SPEC ; 

718 IDEN fprintf                                           l  
718 SPEC ( 
718 IDEN Out                                               l  
718 OPER , 
718 STR IDEN                                                
718 SPEC ) 
718 SPEC ; 

719 IDEN fprintf                                           l  
719 SPEC ( 
719 IDEN Out                                               l  
719 OPER , 
719 STR %s  \n                                              
719 OPER , 
719 IDEN       stringArray                                 l  
719 SPEC ) 
719 SPEC ; 

720 SPEC } 

721 IDEN break                                             l  
721 SPEC ; 

722 REWD case 
722 CHAR a  
722 SPEC : 

723 IDEN stringArray                                       l  
723 OPER [ 
723 IDEN y                                                 l  
723 OPER ] 
723 OPER = 
723 IDEN stringIn                                          l  
723 OPER [ 
723 IDEN x                                                 l  
723 OPER ] 
723 SPEC ; 

724 IDEN x                                                 l  
724 OPER + 
724 OPER + 
724 SPEC ; 

725 IDEN y                                                 l  
725 OPER + 
725 OPER + 
725 SPEC ; 

726 REWD if 
726 SPEC ( 
726 SPEC ( 
726 IDEN stringIn                                          l  
726 OPER [ 
726 IDEN x                                                 l  
726 OPER ] 
726 OPER = 
726 OPER = 
726 CHAR s  
726 SPEC ) 
726 OPER & 
726 OPER & 
726 SPEC ( 
726 IDEN stringIn                                          l  
726 OPER [ 
726 IDEN x                                                 l  
726 OPER + 
726 INTE 1                                                 l  
726 OPER ] 
726 OPER = 
726 OPER = 
726 CHAR e  
726 SPEC ) 
726 SPEC ) 
726 SPEC { 

727 IDEN x                                                 l  
727 OPER + 
727 OPER + 
727 SPEC ; 

728 IDEN fprintf                                           l  
728 SPEC ( 
728 IDEN Out                                               l  
728 OPER , 
728 STR %d                                                  
728 OPER , 
728 IDEN    lineNo                                         l  
728 SPEC ) 
728 SPEC ; 

729 IDEN fprintf                                           l  
729 SPEC ( 
729 IDEN Out                                               l  
729 OPER , 
729 STR REWD                                                
729 SPEC ) 
729 SPEC ; 

730 IDEN fprintf                                           l  
730 SPEC ( 
730 IDEN Out                                               l  
730 OPER , 
730 STR case \n                                             
730 SPEC ) 
730 SPEC ; 

731 SPEC } 

732 REWD else 
732 SPEC { 

733 REWD while 
733 SPEC ( 
733 SPEC ( 
733 IDEN stringIn                                          l  
733 OPER [ 
733 IDEN x                                                 l  
733 OPER ] 
733 OPER > 
733 OPER = 
733 CHAR A  
733 OPER & 
733 OPER & 
733 IDEN stringIn                                          l  
733 OPER [ 
733 IDEN x                                                 l  
733 OPER ] 
733 OPER < 
733 OPER = 
733 CHAR Z  
733 SPEC ) 
733 OPER | 
733 OPER | 
733 SPEC ( 
733 IDEN stringIn                                          l  
733 OPER [ 
733 IDEN x                                                 l  
733 OPER ] 
733 OPER = 
733 OPER = 
733 CHAR _  
733 SPEC ) 
733 OPER | 
733 OPER | 
733 SPEC ( 
733 IDEN stringIn                                          l  
733 OPER [ 
733 IDEN x                                                 l  
733 OPER ] 
733 OPER > 
733 OPER = 
733 CHAR a  
733 OPER & 
733 OPER & 
733 IDEN stringIn                                          l  
733 OPER [ 
733 IDEN x                                                 l  
733 OPER ] 
733 OPER < 
733 OPER = 
733 CHAR z  
733 SPEC ) 
733 SPEC ) 
733 SPEC { 

734 IDEN stringArray                                       l  
734 OPER [ 
734 IDEN y                                                 l  
734 OPER ] 
734 OPER = 
734 IDEN stringIn                                          l  
734 OPER [ 
734 IDEN x                                                 l  
734 OPER ] 
734 SPEC ; 

735 IDEN y                                                 l  
735 OPER + 
735 OPER + 
735 SPEC ; 

736 IDEN x                                                 l  
736 OPER + 
736 OPER + 
736 SPEC ; 

737 SPEC } 

738 IDEN x                                                 l  
738 OPER - 
738 OPER - 
738 SPEC ; 

739 IDEN fprintf                                           l  
739 SPEC ( 
739 IDEN Out                                               l  
739 OPER , 
739 STR %d                                                  
739 OPER , 
739 IDEN    lineNo                                         l  
739 SPEC ) 
739 SPEC ; 

740 IDEN fprintf                                           l  
740 SPEC ( 
740 IDEN Out                                               l  
740 OPER , 
740 STR IDEN                                                
740 SPEC ) 
740 SPEC ; 

741 IDEN fprintf                                           l  
741 SPEC ( 
741 IDEN Out                                               l  
741 OPER , 
741 STR %s  \n                                              
741 OPER , 
741 IDEN       stringArray                                 l  
741 SPEC ) 
741 SPEC ; 

742 SPEC } 

743 IDEN break                                             l  
743 SPEC ; 

744 REWD case 
744 CHAR h  
744 SPEC : 

745 IDEN stringArray                                       l  
745 OPER [ 
745 IDEN y                                                 l  
745 OPER ] 
745 OPER = 
745 IDEN stringIn                                          l  
745 OPER [ 
745 IDEN x                                                 l  
745 OPER ] 
745 SPEC ; 

746 IDEN x                                                 l  
746 OPER + 
746 OPER + 
746 SPEC ; 

747 IDEN y                                                 l  
747 OPER + 
747 OPER + 
747 SPEC ; 

748 REWD if 
748 SPEC ( 
748 SPEC ( 
748 IDEN stringIn                                          l  
748 OPER [ 
748 IDEN x                                                 l  
748 OPER ] 
748 OPER = 
748 OPER = 
748 CHAR a  
748 SPEC ) 
748 OPER & 
748 OPER & 
748 SPEC ( 
748 IDEN stringIn                                          l  
748 OPER [ 
748 IDEN x                                                 l  
748 OPER + 
748 INTE 1                                                 l  
748 OPER ] 
748 OPER = 
748 OPER = 
748 CHAR r  
748 SPEC ) 
748 SPEC ) 
748 SPEC { 

749 IDEN x                                                 l  
749 OPER + 
749 OPER + 
749 SPEC ; 

750 IDEN fprintf                                           l  
750 SPEC ( 
750 IDEN Out                                               l  
750 OPER , 
750 STR %d                                                  
750 OPER , 
750 IDEN    lineNo                                         l  
750 SPEC ) 
750 SPEC ; 

751 IDEN fprintf                                           l  
751 SPEC ( 
751 IDEN Out                                               l  
751 OPER , 
751 STR REWD                                                
751 SPEC ) 
751 SPEC ; 

752 IDEN fprintf                                           l  
752 SPEC ( 
752 IDEN Out                                               l  
752 OPER , 
752 STR char \n                                             
752 SPEC ) 
752 SPEC ; 

753 SPEC } 

754 REWD else 
754 SPEC { 

755 REWD while 
755 SPEC ( 
755 SPEC ( 
755 IDEN stringIn                                          l  
755 OPER [ 
755 IDEN x                                                 l  
755 OPER ] 
755 OPER > 
755 OPER = 
755 CHAR A  
755 OPER & 
755 OPER & 
755 IDEN stringIn                                          l  
755 OPER [ 
755 IDEN x                                                 l  
755 OPER ] 
755 OPER < 
755 OPER = 
755 CHAR Z  
755 SPEC ) 
755 OPER | 
755 OPER | 
755 SPEC ( 
755 IDEN stringIn                                          l  
755 OPER [ 
755 IDEN x                                                 l  
755 OPER ] 
755 OPER = 
755 OPER = 
755 CHAR _  
755 SPEC ) 
755 OPER | 
755 OPER | 
755 SPEC ( 
755 IDEN stringIn                                          l  
755 OPER [ 
755 IDEN x                                                 l  
755 OPER ] 
755 OPER > 
755 OPER = 
755 CHAR a  
755 OPER & 
755 OPER & 
755 IDEN stringIn                                          l  
755 OPER [ 
755 IDEN x                                                 l  
755 OPER ] 
755 OPER < 
755 OPER = 
755 CHAR z  
755 SPEC ) 
755 SPEC ) 
755 SPEC { 

756 IDEN stringArray                                       l  
756 OPER [ 
756 IDEN y                                                 l  
756 OPER ] 
756 OPER = 
756 IDEN stringIn                                          l  
756 OPER [ 
756 IDEN x                                                 l  
756 OPER ] 
756 SPEC ; 

757 IDEN y                                                 l  
757 OPER + 
757 OPER + 
757 SPEC ; 

758 IDEN x                                                 l  
758 OPER + 
758 OPER + 
758 SPEC ; 

759 SPEC } 

760 IDEN x                                                 l  
760 OPER - 
760 OPER - 
760 SPEC ; 

761 IDEN fprintf                                           l  
761 SPEC ( 
761 IDEN Out                                               l  
761 OPER , 
761 STR %d                                                  
761 OPER , 
761 IDEN    lineNo                                         l  
761 SPEC ) 
761 SPEC ; 

762 IDEN fprintf                                           l  
762 SPEC ( 
762 IDEN Out                                               l  
762 OPER , 
762 STR IDEN                                                
762 SPEC ) 
762 SPEC ; 

763 IDEN fprintf                                           l  
763 SPEC ( 
763 IDEN Out                                               l  
763 OPER , 
763 STR %s  \n                                              
763 OPER , 
763 IDEN       stringArray                                 l  
763 SPEC ) 
763 SPEC ; 

764 SPEC } 

765 IDEN break                                             l  
765 SPEC ; 

766 IDEN default                                           l  
766 SPEC : 

767 REWD while 
767 SPEC ( 
767 SPEC ( 
767 IDEN stringIn                                          l  
767 OPER [ 
767 IDEN x                                                 l  
767 OPER ] 
767 OPER > 
767 OPER = 
767 CHAR A  
767 OPER & 
767 OPER & 
767 IDEN stringIn                                          l  
767 OPER [ 
767 IDEN x                                                 l  
767 OPER ] 
767 OPER < 
767 OPER = 
767 CHAR Z  
767 SPEC ) 
767 OPER | 
767 OPER | 
767 SPEC ( 
767 IDEN stringIn                                          l  
767 OPER [ 
767 IDEN x                                                 l  
767 OPER ] 
767 OPER = 
767 OPER = 
767 CHAR _  
767 SPEC ) 
767 OPER | 
767 OPER | 
767 SPEC ( 
767 IDEN stringIn                                          l  
767 OPER [ 
767 IDEN x                                                 l  
767 OPER ] 
767 OPER > 
767 OPER = 
767 CHAR a  
767 OPER & 
767 OPER & 
767 IDEN stringIn                                          l  
767 OPER [ 
767 IDEN x                                                 l  
767 OPER ] 
767 OPER < 
767 OPER = 
767 CHAR z  
767 SPEC ) 
767 SPEC ) 
767 SPEC { 

768 IDEN stringArray                                       l  
768 OPER [ 
768 IDEN y                                                 l  
768 OPER ] 
768 OPER = 
768 IDEN stringIn                                          l  
768 OPER [ 
768 IDEN x                                                 l  
768 OPER ] 
768 SPEC ; 

769 IDEN y                                                 l  
769 OPER + 
769 OPER + 
769 SPEC ; 

770 IDEN x                                                 l  
770 OPER + 
770 OPER + 
770 SPEC ; 

771 SPEC } 

772 IDEN x                                                 l  
772 OPER - 
772 OPER - 
772 SPEC ; 

773 IDEN fprintf                                           l  
773 SPEC ( 
773 IDEN Out                                               l  
773 OPER , 
773 STR %d                                                  
773 OPER , 
773 IDEN    lineNo                                         l  
773 SPEC ) 
773 SPEC ; 

774 IDEN fprintf                                           l  
774 SPEC ( 
774 IDEN Out                                               l  
774 OPER , 
774 STR IDEN                                                
774 SPEC ) 
774 SPEC ; 

775 IDEN fprintf                                           l  
775 SPEC ( 
775 IDEN Out                                               l  
775 OPER , 
775 STR %s  \n                                              
775 OPER , 
775 IDEN       stringArray                                 l  
775 SPEC ) 
775 SPEC ; 

776 IDEN break                                             l  
776 SPEC ; 

777 SPEC } 

778 IDEN y                                                 l  
778 OPER = 
778 INTE 0                                                 l  
778 SPEC ; 

779 REWD int 
779 IDEN loop                                              l  
779 INTE 7                                                 l  
779 OPER = 
779 INTE 0                                                 l  
779 SPEC ; 

780 REWD while 
780 SPEC ( 
780 IDEN loop                                              l  
780 INTE 7                                                 l  
780 OPER < 
780 INTE 50                                                l  
780 SPEC ) 
780 SPEC { 

781 IDEN stringArray                                       l  
781 OPER [ 
781 IDEN loop                                              l  
781 INTE 7                                                 l  
781 OPER ] 
781 OPER = 
781 CHAR    
781 SPEC ; 

782 IDEN loop                                              l  
782 INTE 7                                                 l  
782 OPER + 
782 OPER + 
782 SPEC ; 

783 SPEC } 

784 IDEN break                                             l  
784 SPEC ; 


786 SC // 

787 REWD case 
787 CHAR a  
787 SPEC : 
787 REWD case 
787 CHAR b  
787 SPEC : 
787 REWD case 
787 CHAR h  
787 SPEC : 
787 REWD case 
787 CHAR j  
787 SPEC : 
787 REWD case 
787 CHAR k  
787 SPEC : 
787 REWD case 
787 CHAR Y  
787 SPEC : 
787 REWD case 
787 CHAR Z  
787 SPEC : 
787 REWD case 
787 CHAR _  
787 SPEC : 
787 REWD case 
787 CHAR m  
787 SPEC : 
787 REWD case 
787 CHAR n  
787 SPEC : 

788 REWD case 
788 CHAR r  
788 SPEC : 
788 REWD case 
788 CHAR x  
788 SPEC : 
788 REWD case 
788 CHAR y  
788 SPEC : 
788 REWD case 
788 CHAR Q  
788 SPEC : 
788 REWD case 
788 CHAR R  
788 SPEC : 
788 REWD case 
788 CHAR T  
788 SPEC : 
788 REWD case 
788 CHAR U  
788 SPEC : 
788 REWD case 
788 CHAR V  
788 SPEC : 
788 REWD case 
788 CHAR X  
788 SPEC : 
788 REWD case 
788 CHAR F  
788 SPEC : 

789 REWD case 
789 CHAR z  
789 SPEC : 
789 REWD case 
789 CHAR A  
789 SPEC : 
789 REWD case 
789 CHAR B  
789 SPEC : 
789 REWD case 
789 CHAR G  
789 SPEC : 
789 REWD case 
789 CHAR H  
789 SPEC : 
789 REWD case 
789 CHAR J  
789 SPEC : 
789 REWD case 
789 CHAR K  
789 SPEC : 
789 REWD case 
789 CHAR L  
789 SPEC : 
789 REWD case 
789 CHAR M  
789 SPEC : 
789 REWD case 
789 CHAR N  
789 SPEC : 

790 REWD case 
790 CHAR O  
790 SPEC : 
790 REWD case 
790 CHAR P  
790 SPEC : 
790 REWD case 
790 CHAR o  
790 SPEC : 
790 REWD case 
790 CHAR p  
790 SPEC : 
790 REWD case 
790 CHAR q  
790 SPEC : 
790 REWD case 
790 CHAR I  
790 SPEC : 
790 REWD case 
790 CHAR C  
790 SPEC : 

791 IDEN stringArray                                       l  
791 OPER [ 
791 IDEN y                                                 l  
791 OPER ] 
791 OPER = 
791 IDEN stringIn                                          l  
791 OPER [ 
791 IDEN x                                                 l  
791 OPER ] 
791 SPEC ; 

792 IDEN x                                                 l  
792 OPER + 
792 OPER + 
792 SPEC ; 

793 IDEN y                                                 l  
793 OPER + 
793 OPER + 
793 SPEC ; 

794 REWD if 
794 SPEC ( 
794 SPEC ( 
794 IDEN stringIn                                          l  
794 OPER [ 
794 IDEN x                                                 l  
794 OPER ] 
794 OPER > 
794 OPER = 
794 CHAR a  
794 OPER & 
794 OPER & 
794 IDEN stringIn                                          l  
794 OPER [ 
794 IDEN x                                                 l  
794 OPER ] 
794 OPER < 
794 OPER = 
794 CHAR z  
794 SPEC ) 
794 OPER | 
794 OPER | 
794 SPEC ( 
794 IDEN stringIn                                          l  
794 OPER [ 
794 IDEN x                                                 l  
794 OPER ] 
794 OPER > 
794 OPER = 
794 CHAR A  
794 OPER & 
794 OPER & 
794 IDEN stringIn                                          l  
794 OPER [ 
794 IDEN x                                                 l  
794 OPER ] 
794 OPER < 
794 OPER = 
794 CHAR Z  
794 SPEC ) 
794 OPER | 
794 OPER | 
794 SPEC ( 
794 IDEN stringIn                                          l  
794 OPER [ 
794 IDEN x                                                 l  
794 OPER ] 
794 OPER = 
794 OPER = 
794 CHAR _  
794 SPEC ) 
794 SPEC ) 
794 SPEC { 

795 REWD while 
795 SPEC ( 
795 SPEC ( 
795 IDEN stringIn                                          l  
795 OPER [ 
795 IDEN x                                                 l  
795 OPER ] 
795 OPER > 
795 OPER = 
795 CHAR A  
795 OPER & 
795 OPER & 
795 IDEN stringIn                                          l  
795 OPER [ 
795 IDEN x                                                 l  
795 OPER ] 
795 OPER < 
795 OPER = 
795 CHAR Z  
795 SPEC ) 
795 OPER | 
795 OPER | 
795 SPEC ( 
795 IDEN stringIn                                          l  
795 OPER [ 
795 IDEN x                                                 l  
795 OPER ] 
795 OPER > 
795 OPER = 
795 CHAR a  
795 OPER & 
795 OPER & 
795 IDEN stringIn                                          l  
795 OPER [ 
795 IDEN x                                                 l  
795 OPER ] 
795 OPER < 
795 OPER = 
795 CHAR z  
795 SPEC ) 
795 OPER | 
795 OPER | 
795 SPEC ( 
795 IDEN stringIn                                          l  
795 OPER [ 
795 IDEN x                                                 l  
795 OPER ] 
795 OPER = 
795 OPER = 
795 CHAR _  
795 SPEC ) 
795 SPEC ) 
795 SPEC { 

796 IDEN stringArray                                       l  
796 OPER [ 
796 IDEN y                                                 l  
796 OPER ] 
796 OPER = 
796 IDEN stringIn                                          l  
796 OPER [ 
796 IDEN x                                                 l  
796 OPER ] 
796 SPEC ; 

797 IDEN y                                                 l  
797 OPER + 
797 OPER + 
797 SPEC ; 

798 IDEN x                                                 l  
798 OPER + 
798 OPER + 
798 SPEC ; 

799 SPEC } 

800 SPEC } 

801 IDEN x                                                 l  
801 OPER - 
801 OPER - 
801 SPEC ; 

802 IDEN fprintf                                           l  
802 SPEC ( 
802 IDEN Out                                               l  
802 OPER , 
802 STR %d                                                  
802 OPER , 
802 IDEN    lineNo                                         l  
802 SPEC ) 
802 SPEC ; 

803 IDEN fprintf                                           l  
803 SPEC ( 
803 IDEN Out                                               l  
803 OPER , 
803 STR IDEN                                                
803 SPEC ) 
803 SPEC ; 

804 IDEN fprintf                                           l  
804 SPEC ( 
804 IDEN Out                                               l  
804 OPER , 
804 STR %s  \n                                              
804 OPER , 
804 IDEN       stringArray                                 l  
804 SPEC ) 
804 SPEC ; 

805 IDEN y                                                 l  
805 OPER = 
805 INTE 0                                                 l  
805 SPEC ; 

806 REWD int 
806 IDEN loop                                              l  
806 INTE 9                                                 l  
806 OPER = 
806 INTE 0                                                 l  
806 SPEC ; 

807 REWD while 
807 SPEC ( 
807 IDEN loop                                              l  
807 INTE 9                                                 l  
807 OPER < 
807 INTE 50                                                l  
807 SPEC ) 
807 SPEC { 

808 IDEN stringArray                                       l  
808 OPER [ 
808 IDEN loop                                              l  
808 INTE 9                                                 l  
808 OPER ] 
808 OPER = 
808 CHAR    
808 SPEC ; 

809 IDEN loop                                              l  
809 INTE 9                                                 l  
809 OPER + 
809 OPER + 
809 SPEC ; 

810 SPEC } 

811 IDEN break                                             l  
811 SPEC ; 

812 REWD case 
812 CHAR {  
812 SPEC : 

813 IDEN fprintf                                           l  
813 SPEC ( 
813 IDEN Out                                               l  
813 OPER , 
813 STR %d                                                  
813 OPER , 
813 IDEN    lineNo                                         l  
813 SPEC ) 
813 SPEC ; 

814 IDEN fprintf                                           l  
814 SPEC ( 
814 IDEN Out                                               l  
814 OPER , 
814 STR SPEC                                                
814 SPEC ) 
814 SPEC ; 

815 IDEN fprintf                                           l  
815 SPEC ( 
815 IDEN Out                                               l  
815 OPER , 
815 STR { \n                                                
815 SPEC ) 
815 SPEC ; 

816 IDEN break                                             l  
816 SPEC ; 

817 REWD case 
817 CHAR }  
817 SPEC : 

818 IDEN fprintf                                           l  
818 SPEC ( 
818 IDEN Out                                               l  
818 OPER , 
818 STR %d                                                  
818 OPER , 
818 IDEN    lineNo                                         l  
818 SPEC ) 
818 SPEC ; 

819 IDEN fprintf                                           l  
819 SPEC ( 
819 IDEN Out                                               l  
819 OPER , 
819 STR SPEC                                                
819 SPEC ) 
819 SPEC ; 

820 IDEN fprintf                                           l  
820 SPEC ( 
820 IDEN Out                                               l  
820 OPER , 
820 STR } \n                                                
820 SPEC ) 
820 SPEC ; 

821 IDEN break                                             l  
821 SPEC ; 

822 REWD case 
822 CHAR (  
822 SPEC : 

823 IDEN fprintf                                           l  
823 SPEC ( 
823 IDEN Out                                               l  
823 OPER , 
823 STR %d                                                  
823 OPER , 
823 IDEN    lineNo                                         l  
823 SPEC ) 
823 SPEC ; 

824 IDEN fprintf                                           l  
824 SPEC ( 
824 IDEN Out                                               l  
824 OPER , 
824 STR SPEC                                                
824 SPEC ) 
824 SPEC ; 

825 IDEN fprintf                                           l  
825 SPEC ( 
825 IDEN Out                                               l  
825 OPER , 
825 STR ( \n                                                
825 SPEC ) 
825 SPEC ; 

826 IDEN break                                             l  
826 SPEC ; 

827 REWD case 
827 CHAR )  
827 SPEC : 

828 IDEN fprintf                                           l  
828 SPEC ( 
828 IDEN Out                                               l  
828 OPER , 
828 STR %d                                                  
828 OPER , 
828 IDEN    lineNo                                         l  
828 SPEC ) 
828 SPEC ; 

829 IDEN fprintf                                           l  
829 SPEC ( 
829 IDEN Out                                               l  
829 OPER , 
829 STR SPEC                                                
829 SPEC ) 
829 SPEC ; 

830 IDEN fprintf                                           l  
830 SPEC ( 
830 IDEN Out                                               l  
830 OPER , 
830 STR ) \n                                                
830 SPEC ) 
830 SPEC ; 

831 IDEN break                                             l  
831 SPEC ; 

832 REWD case 
832 CHAR ;  
832 SPEC : 

833 IDEN fprintf                                           l  
833 SPEC ( 
833 IDEN Out                                               l  
833 OPER , 
833 STR %d                                                  
833 OPER , 
833 IDEN    lineNo                                         l  
833 SPEC ) 
833 SPEC ; 

834 IDEN fprintf                                           l  
834 SPEC ( 
834 IDEN Out                                               l  
834 OPER , 
834 STR SPEC                                                
834 SPEC ) 
834 SPEC ; 

835 IDEN fprintf                                           l  
835 SPEC ( 
835 IDEN Out                                               l  
835 OPER , 
835 STR ; \n                                                
835 SPEC ) 
835 SPEC ; 

836 IDEN break                                             l  
836 SPEC ; 

837 SC // 

838 REWD case 
838 CHAR ?  
838 SPEC : 

839 IDEN fprintf                                           l  
839 SPEC ( 
839 IDEN Out                                               l  
839 OPER , 
839 STR %d                                                  
839 OPER , 
839 IDEN    lineNo                                         l  
839 SPEC ) 
839 SPEC ; 

840 IDEN fprintf                                           l  
840 SPEC ( 
840 IDEN Out                                               l  
840 OPER , 
840 STR SPEC                                                
840 SPEC ) 
840 SPEC ; 

841 IDEN fprintf                                           l  
841 SPEC ( 
841 IDEN Out                                               l  
841 OPER , 
841 STR ? \n                                                
841 SPEC ) 
841 SPEC ; 

842 IDEN break                                             l  
842 SPEC ; 

843 SC // 

844 REWD case 
844 CHAR :  
844 SPEC : 

845 IDEN fprintf                                           l  
845 SPEC ( 
845 IDEN Out                                               l  
845 OPER , 
845 STR %d                                                  
845 OPER , 
845 IDEN    lineNo                                         l  
845 SPEC ) 
845 SPEC ; 

846 IDEN fprintf                                           l  
846 SPEC ( 
846 IDEN Out                                               l  
846 OPER , 
846 STR SPEC                                                
846 SPEC ) 
846 SPEC ; 

847 IDEN fprintf                                           l  
847 SPEC ( 
847 IDEN Out                                               l  
847 OPER , 
847 STR : \n                                                
847 SPEC ) 
847 SPEC ; 

848 IDEN break                                             l  
848 SPEC ; 

849 REWD case 
849 CHAR 0  
849 SPEC : 
849 REWD case 
849 CHAR 1  
849 SPEC : 
849 REWD case 
849 CHAR 2  
849 SPEC : 
849 REWD case 
849 CHAR 3  
849 SPEC : 
849 REWD case 
849 CHAR 4  
849 SPEC : 
849 REWD case 
849 CHAR 5  
849 SPEC : 
849 REWD case 
849 CHAR 6  
849 SPEC : 
849 REWD case 
849 CHAR 7  
849 SPEC : 
849 REWD case 
849 CHAR 8  
849 SPEC : 
849 REWD case 
849 CHAR 9  
849 SPEC : 

850 IDEN stringArray                                       l  
850 OPER [ 
850 IDEN y                                                 l  
850 OPER ] 
850 OPER = 
850 IDEN stringIn                                          l  
850 OPER [ 
850 IDEN x                                                 l  
850 OPER ] 
850 SPEC ; 

851 IDEN x                                                 l  
851 OPER + 
851 OPER + 
851 SPEC ; 

852 IDEN y                                                 l  
852 OPER + 
852 OPER + 
852 SPEC ; 

853 REWD while 
853 SPEC ( 
853 IDEN stringIn                                          l  
853 OPER [ 
853 IDEN x                                                 l  
853 OPER ] 
853 OPER > 
853 OPER = 
853 CHAR 0  
853 OPER & 
853 OPER & 
853 IDEN stringIn                                          l  
853 OPER [ 
853 IDEN x                                                 l  
853 OPER ] 
853 OPER < 
853 OPER = 
853 CHAR 9  
853 SPEC ) 
853 SPEC { 

854 IDEN stringArray                                       l  
854 OPER [ 
854 IDEN y                                                 l  
854 OPER ] 
854 OPER = 
854 IDEN stringIn                                          l  
854 OPER [ 
854 IDEN x                                                 l  
854 OPER ] 
854 SPEC ; 

855 IDEN x                                                 l  
855 OPER + 
855 OPER + 
855 SPEC ; 

856 IDEN y                                                 l  
856 OPER + 
856 OPER + 
856 SPEC ; 

857 SPEC } 

858 REWD if 
858 SPEC ( 
858 IDEN stringIn                                          l  
858 OPER [ 
858 IDEN x                                                 l  
858 OPER ] 
858 OPER = 
858 OPER = 
858 CHAR .  
858 SPEC ) 
858 SPEC { 

859 IDEN stringArray                                       l  
859 OPER [ 
859 IDEN y                                                 l  
859 OPER ] 
859 OPER = 
859 IDEN stringIn                                          l  
859 OPER [ 
859 IDEN x                                                 l  
859 OPER ] 
859 SPEC ; 

860 IDEN x                                                 l  
860 OPER + 
860 OPER + 
860 SPEC ; 

861 IDEN y                                                 l  
861 OPER + 
861 OPER + 
861 SPEC ; 

862 REWD while 
862 SPEC ( 
862 IDEN stringIn                                          l  
862 OPER [ 
862 IDEN x                                                 l  
862 OPER ] 
862 OPER > 
862 OPER = 
862 CHAR 0  
862 OPER & 
862 OPER & 
862 IDEN stringIn                                          l  
862 OPER [ 
862 IDEN x                                                 l  
862 OPER ] 
862 OPER < 
862 OPER = 
862 CHAR 9  
862 SPEC ) 
862 SPEC { 

863 IDEN stringArray                                       l  
863 OPER [ 
863 IDEN y                                                 l  
863 OPER ] 
863 OPER = 
863 IDEN stringIn                                          l  
863 OPER [ 
863 IDEN x                                                 l  
863 OPER ] 
863 SPEC ; 

864 IDEN x                                                 l  
864 OPER + 
864 OPER + 
864 SPEC ; 

865 IDEN y                                                 l  
865 OPER + 
865 OPER + 
865 SPEC ; 

866 SPEC } 

867 REWD if 
867 SPEC ( 
867 SPEC ( 
867 IDEN stringIn                                          l  
867 OPER [ 
867 IDEN x                                                 l  
867 OPER ] 
867 OPER = 
867 OPER = 
867 CHAR e  
867 SPEC ) 
867 OPER | 
867 OPER | 
867 SPEC ( 
867 IDEN stringIn                                          l  
867 OPER [ 
867 IDEN x                                                 l  
867 OPER ] 
867 OPER = 
867 OPER = 
867 CHAR E  
867 SPEC ) 
867 SPEC ) 
867 SPEC { 

868 IDEN stringArray                                       l  
868 OPER [ 
868 IDEN y                                                 l  
868 OPER ] 
868 OPER = 
868 IDEN stringIn                                          l  
868 OPER [ 
868 IDEN x                                                 l  
868 OPER ] 
868 SPEC ; 

869 IDEN x                                                 l  
869 OPER + 
869 OPER + 
869 SPEC ; 

870 IDEN y                                                 l  
870 OPER + 
870 OPER + 
870 SPEC ; 

871 REWD if 
871 SPEC ( 
871 SPEC ( 
871 IDEN stringIn                                          l  
871 OPER [ 
871 IDEN x                                                 l  
871 OPER ] 
871 OPER = 
871 OPER = 
871 CHAR +  
871 SPEC ) 
871 OPER | 
871 OPER | 
871 SPEC ( 
871 IDEN stringIn                                          l  
871 OPER [ 
871 IDEN x                                                 l  
871 OPER ] 
871 OPER = 
871 OPER = 
871 CHAR -  
871 SPEC ) 
871 OPER | 
871 OPER | 
871 SPEC ( 
871 IDEN stringIn                                          l  
871 OPER [ 
871 IDEN x                                                 l  
871 OPER ] 
871 OPER > 
871 OPER = 
871 CHAR 0  
871 OPER & 
871 OPER & 
871 IDEN stringIn                                          l  
871 OPER [ 
871 IDEN x                                                 l  
871 OPER ] 
871 OPER < 
871 OPER = 
871 CHAR 9  
871 SPEC ) 
871 SPEC ) 
871 SPEC { 

872 IDEN stringArray                                       l  
872 OPER [ 
872 IDEN y                                                 l  
872 OPER ] 
872 OPER = 
872 IDEN stringIn                                          l  
872 OPER [ 
872 IDEN x                                                 l  
872 OPER ] 
872 SPEC ; 

873 IDEN x                                                 l  
873 OPER + 
873 OPER + 
873 SPEC ; 

874 IDEN y                                                 l  
874 OPER + 
874 OPER + 
874 SPEC ; 

875 REWD while 
875 SPEC ( 
875 IDEN stringIn                                          l  
875 OPER [ 
875 IDEN x                                                 l  
875 OPER ] 
875 OPER > 
875 OPER = 
875 CHAR 0  
875 OPER & 
875 OPER & 
875 IDEN stringIn                                          l  
875 OPER [ 
875 IDEN x                                                 l  
875 OPER ] 
875 OPER < 
875 OPER = 
875 CHAR 9  
875 SPEC ) 
875 SPEC { 

876 IDEN stringArray                                       l  
876 OPER [ 
876 IDEN y                                                 l  
876 OPER ] 
876 OPER = 
876 IDEN stringIn                                          l  
876 OPER [ 
876 IDEN x                                                 l  
876 OPER ] 
876 SPEC ; 

877 IDEN x                                                 l  
877 OPER + 
877 OPER + 
877 SPEC ; 

878 IDEN y                                                 l  
878 OPER + 
878 OPER + 
878 SPEC ; 

879 SPEC } 

880 SPEC } 

881 SPEC } 

882 IDEN x                                                 l  
882 OPER - 
882 OPER - 
882 SPEC ; 

883 IDEN fprintf                                           l  
883 SPEC ( 
883 IDEN Out                                               l  
883 OPER , 
883 STR %d                                                  
883 OPER , 
883 IDEN    lineNo                                         l  
883 SPEC ) 
883 SPEC ; 

884 IDEN fprintf                                           l  
884 SPEC ( 
884 IDEN Out                                               l  
884 OPER , 
884 STR FLOT                                                
884 SPEC ) 
884 SPEC ; 

885 IDEN fprintf                                           l  
885 SPEC ( 
885 IDEN Out                                               l  
885 OPER , 
885 STR %s  \n                                              
885 OPER , 
885 IDEN       stringArray                                 l  
885 SPEC ) 
885 SPEC ; 

886 SPEC } 

887 REWD else 
887 SPEC { 

888 IDEN fprintf                                           l  
888 SPEC ( 
888 IDEN Out                                               l  
888 OPER , 
888 STR %d                                                  
888 OPER , 
888 IDEN    lineNo                                         l  
888 SPEC ) 
888 SPEC ; 

889 IDEN fprintf                                           l  
889 SPEC ( 
889 IDEN Out                                               l  
889 OPER , 
889 STR INTE                                                
889 SPEC ) 
889 SPEC ; 

890 IDEN fprintf                                           l  
890 SPEC ( 
890 IDEN Out                                               l  
890 OPER , 
890 STR %s  \n                                              
890 OPER , 
890 IDEN       stringArray                                 l  
890 SPEC ) 
890 SPEC ; 

891 IDEN x                                                 l  
891 OPER - 
891 OPER - 
891 SPEC ; 

892 SPEC } 

893 IDEN y                                                 l  
893 OPER = 
893 INTE 0                                                 l  
893 SPEC ; 

894 REWD int 
894 IDEN loop                                              l  
894 INTE 8                                                 l  
894 OPER = 
894 INTE 0                                                 l  
894 SPEC ; 

895 REWD while 
895 SPEC ( 
895 IDEN loop                                              l  
895 INTE 8                                                 l  
895 OPER < 
895 INTE 50                                                l  
895 SPEC ) 
895 SPEC { 

896 IDEN stringArray                                       l  
896 OPER [ 
896 IDEN loop                                              l  
896 INTE 8                                                 l  
896 OPER ] 
896 OPER = 
896 CHAR    
896 SPEC ; 

897 IDEN loop                                              l  
897 INTE 8                                                 l  
897 OPER + 
897 OPER + 
897 SPEC ; 

898 SPEC } 

899 IDEN break                                             l  
899 SPEC ; 


901 REWD case 
901 CHAR +  
901 SPEC : 

902 IDEN fprintf                                           l  
902 SPEC ( 
902 IDEN Out                                               l  
902 OPER , 
902 STR %d                                                  
902 OPER , 
902 IDEN    lineNo                                         l  
902 SPEC ) 
902 SPEC ; 

903 IDEN fprintf                                           l  
903 SPEC ( 
903 IDEN Out                                               l  
903 OPER , 
903 STR OPER                                                
903 SPEC ) 
903 SPEC ; 

904 IDEN fprintf                                           l  
904 SPEC ( 
904 IDEN Out                                               l  
904 OPER , 
904 STR + \n                                                
904 SPEC ) 
904 SPEC ; 

905 IDEN break                                             l  
905 SPEC ; 

906 REWD case 
906 CHAR =  
906 SPEC : 

907 IDEN fprintf                                           l  
907 SPEC ( 
907 IDEN Out                                               l  
907 OPER , 
907 STR %d                                                  
907 OPER , 
907 IDEN    lineNo                                         l  
907 SPEC ) 
907 SPEC ; 

908 IDEN fprintf                                           l  
908 SPEC ( 
908 IDEN Out                                               l  
908 OPER , 
908 STR OPER                                                
908 SPEC ) 
908 SPEC ; 

909 IDEN fprintf                                           l  
909 SPEC ( 
909 IDEN Out                                               l  
909 OPER , 
909 STR = \n                                                
909 SPEC ) 
909 SPEC ; 

910 IDEN break                                             l  
910 SPEC ; 

911 REWD case 
911 CHAR -  
911 SPEC : 

912 IDEN fprintf                                           l  
912 SPEC ( 
912 IDEN Out                                               l  
912 OPER , 
912 STR %d                                                  
912 OPER , 
912 IDEN    lineNo                                         l  
912 SPEC ) 
912 SPEC ; 

913 IDEN fprintf                                           l  
913 SPEC ( 
913 IDEN Out                                               l  
913 OPER , 
913 STR OPER                                                
913 SPEC ) 
913 SPEC ; 

914 IDEN fprintf                                           l  
914 SPEC ( 
914 IDEN Out                                               l  
914 OPER , 
914 STR - \n                                                
914 SPEC ) 
914 SPEC ; 

915 IDEN break                                             l  
915 SPEC ; 

916 REWD case 
916 CHAR *  
916 SPEC : 

917 IDEN fprintf                                           l  
917 SPEC ( 
917 IDEN Out                                               l  
917 OPER , 
917 STR %d                                                  
917 OPER , 
917 IDEN    lineNo                                         l  
917 SPEC ) 
917 SPEC ; 

918 IDEN fprintf                                           l  
918 SPEC ( 
918 IDEN Out                                               l  
918 OPER , 
918 STR OPER                                                
918 SPEC ) 
918 SPEC ; 

919 IDEN fprintf                                           l  
919 SPEC ( 
919 IDEN Out                                               l  
919 OPER , 
919 STR * \n                                                
919 SPEC ) 
919 SPEC ; 

920 IDEN break                                             l  
920 SPEC ; 

921 REWD case 
921 CHAR ,  
921 SPEC : 

922 IDEN fprintf                                           l  
922 SPEC ( 
922 IDEN Out                                               l  
922 OPER , 
922 STR %d                                                  
922 OPER , 
922 IDEN    lineNo                                         l  
922 SPEC ) 
922 SPEC ; 

923 IDEN fprintf                                           l  
923 SPEC ( 
923 IDEN Out                                               l  
923 OPER , 
923 STR OPER                                                
923 SPEC ) 
923 SPEC ; 

924 IDEN fprintf                                           l  
924 SPEC ( 
924 IDEN Out                                               l  
924 OPER , 
924 STR , \n                                                
924 SPEC ) 
924 SPEC ; 

925 IDEN break                                             l  
925 SPEC ; 

926 REWD case 
926 CHAR %  
926 SPEC : 

927 IDEN fprintf                                           l  
927 SPEC ( 
927 IDEN Out                                               l  
927 OPER , 
927 STR %d                                                  
927 OPER , 
927 IDEN    lineNo                                         l  
927 SPEC ) 
927 SPEC ; 

928 IDEN fprintf                                           l  
928 SPEC ( 
928 IDEN Out                                               l  
928 OPER , 
928 STR OPER                                                
928 SPEC ) 
928 SPEC ; 

929 IDEN fprintf                                           l  
929 SPEC ( 
929 IDEN Out                                               l  
929 OPER , 
929 STR % \n                                                
929 SPEC ) 
929 SPEC ; 

930 IDEN break                                             l  
930 SPEC ; 

931 REWD case 
931 CHAR >  
931 SPEC : 

932 IDEN fprintf                                           l  
932 SPEC ( 
932 IDEN Out                                               l  
932 OPER , 
932 STR %d                                                  
932 OPER , 
932 IDEN    lineNo                                         l  
932 SPEC ) 
932 SPEC ; 

933 IDEN fprintf                                           l  
933 SPEC ( 
933 IDEN Out                                               l  
933 OPER , 
933 STR OPER                                                
933 SPEC ) 
933 SPEC ; 

934 IDEN fprintf                                           l  
934 SPEC ( 
934 IDEN Out                                               l  
934 OPER , 
934 STR > \n                                                
934 SPEC ) 
934 SPEC ; 

935 IDEN break                                             l  
935 SPEC ; 

936 REWD case 
936 CHAR <  
936 SPEC : 

937 IDEN fprintf                                           l  
937 SPEC ( 
937 IDEN Out                                               l  
937 OPER , 
937 STR %d                                                  
937 OPER , 
937 IDEN    lineNo                                         l  
937 SPEC ) 
937 SPEC ; 

938 IDEN fprintf                                           l  
938 SPEC ( 
938 IDEN Out                                               l  
938 OPER , 
938 STR OPER                                                
938 SPEC ) 
938 SPEC ; 

939 IDEN fprintf                                           l  
939 SPEC ( 
939 IDEN Out                                               l  
939 OPER , 
939 STR < \n                                                
939 SPEC ) 
939 SPEC ; 

940 IDEN break                                             l  
940 SPEC ; 

941 REWD case 
941 CHAR !  
941 SPEC : 

942 IDEN fprintf                                           l  
942 SPEC ( 
942 IDEN Out                                               l  
942 OPER , 
942 STR %d                                                  
942 OPER , 
942 IDEN    lineNo                                         l  
942 SPEC ) 
942 SPEC ; 

943 IDEN fprintf                                           l  
943 SPEC ( 
943 IDEN Out                                               l  
943 OPER , 
943 STR OPER                                                
943 SPEC ) 
943 SPEC ; 

944 IDEN fprintf                                           l  
944 SPEC ( 
944 IDEN Out                                               l  
944 OPER , 
944 STR ! \n                                                
944 SPEC ) 
944 SPEC ; 

945 IDEN break                                             l  
945 SPEC ; 

946 REWD case 
946 CHAR &  
946 SPEC : 

947 IDEN fprintf                                           l  
947 SPEC ( 
947 IDEN Out                                               l  
947 OPER , 
947 STR %d                                                  
947 OPER , 
947 IDEN    lineNo                                         l  
947 SPEC ) 
947 SPEC ; 

948 IDEN fprintf                                           l  
948 SPEC ( 
948 IDEN Out                                               l  
948 OPER , 
948 STR OPER                                                
948 SPEC ) 
948 SPEC ; 

949 IDEN fprintf                                           l  
949 SPEC ( 
949 IDEN Out                                               l  
949 OPER , 
949 STR & \n                                                
949 SPEC ) 
949 SPEC ; 

950 IDEN break                                             l  
950 SPEC ; 

951 REWD case 
951 CHAR [  
951 SPEC : 

952 IDEN fprintf                                           l  
952 SPEC ( 
952 IDEN Out                                               l  
952 OPER , 
952 STR %d                                                  
952 OPER , 
952 IDEN    lineNo                                         l  
952 SPEC ) 
952 SPEC ; 

953 IDEN fprintf                                           l  
953 SPEC ( 
953 IDEN Out                                               l  
953 OPER , 
953 STR OPER                                                
953 SPEC ) 
953 SPEC ; 

954 IDEN fprintf                                           l  
954 SPEC ( 
954 IDEN Out                                               l  
954 OPER , 
954 STR [ \n                                                
954 SPEC ) 
954 SPEC ; 

955 IDEN break                                             l  
955 SPEC ; 

956 REWD case 
956 CHAR ]  
956 SPEC : 

957 IDEN fprintf                                           l  
957 SPEC ( 
957 IDEN Out                                               l  
957 OPER , 
957 STR %d                                                  
957 OPER , 
957 IDEN    lineNo                                         l  
957 SPEC ) 
957 SPEC ; 

958 IDEN fprintf                                           l  
958 SPEC ( 
958 IDEN Out                                               l  
958 OPER , 
958 STR OPER                                                
958 SPEC ) 
958 SPEC ; 

959 IDEN fprintf                                           l  
959 SPEC ( 
959 IDEN Out                                               l  
959 OPER , 
959 STR ] \n                                                
959 SPEC ) 
959 SPEC ; 

960 IDEN break                                             l  
960 SPEC ; 

961 REWD case 
961 CHAR |  
961 SPEC : 

962 IDEN fprintf                                           l  
962 SPEC ( 
962 IDEN Out                                               l  
962 OPER , 
962 STR %d                                                  
962 OPER , 
962 IDEN    lineNo                                         l  
962 SPEC ) 
962 SPEC ; 

963 IDEN fprintf                                           l  
963 SPEC ( 
963 IDEN Out                                               l  
963 OPER , 
963 STR OPER                                                
963 SPEC ) 
963 SPEC ; 

964 IDEN fprintf                                           l  
964 SPEC ( 
964 IDEN Out                                               l  
964 OPER , 
964 STR | \n                                                
964 SPEC ) 
964 SPEC ; 

965 IDEN break                                             l  
965 SPEC ; 

966 REWD case 
966 CHAR ^  
966 SPEC : 

967 IDEN fprintf                                           l  
967 SPEC ( 
967 IDEN Out                                               l  
967 OPER , 
967 STR %d                                                  
967 OPER , 
967 IDEN    lineNo                                         l  
967 SPEC ) 
967 SPEC ; 

968 IDEN fprintf                                           l  
968 SPEC ( 
968 IDEN Out                                               l  
968 OPER , 
968 STR OPER                                                
968 SPEC ) 
968 SPEC ; 

969 IDEN fprintf                                           l  
969 SPEC ( 
969 IDEN Out                                               l  
969 OPER , 
969 STR ^ \n                                                
969 SPEC ) 
969 SPEC ; 

970 IDEN break                                             l  
970 SPEC ; 

971 REWD case 
971 CHAR .  
971 SPEC : 

972 IDEN fprintf                                           l  
972 SPEC ( 
972 IDEN Out                                               l  
972 OPER , 
972 STR %d                                                  
972 OPER , 
972 IDEN    lineNo                                         l  
972 SPEC ) 
972 SPEC ; 

973 IDEN fprintf                                           l  
973 SPEC ( 
973 IDEN Out                                               l  
973 OPER , 
973 STR OPER                                                
973 SPEC ) 
973 SPEC ; 

974 IDEN fprintf                                           l  
974 SPEC ( 
974 IDEN Out                                               l  
974 OPER , 
974 STR . \n                                                
974 SPEC ) 
974 SPEC ; 

975 IDEN break                                             l  
975 SPEC ; 

976 IDEN default                                           l  
976 SPEC : 

977 IDEN break                                             l  
977 SPEC ; 

978 SPEC } 

979 IDEN x                                                 l  
979 OPER + 
979 OPER + 
979 SPEC ; 

980 SPEC } 

981 IDEN lineNo                                            l  
981 OPER + 
981 OPER + 
981 SPEC ; 

982 REWD int 
982 IDEN loop                                              l  
982 OPER = 
982 INTE 0                                                 l  
982 SPEC ; 

983 REWD while 
983 SPEC ( 
983 IDEN loop                                              l  
983 OPER < 
983 INTE 50                                                l  
983 SPEC ) 
983 SPEC { 

984 IDEN stringArray                                       l  
984 OPER [ 
984 IDEN loop                                              l  
984 OPER ] 
984 OPER = 
984 CHAR    
984 SPEC ; 

985 IDEN loop                                              l  
985 OPER + 
985 OPER + 
985 SPEC ; 

986 SPEC } 

987 REWD int 
987 IDEN l                                                 l  
987 OPER = 
987 INTE 0                                                 l  
987 SPEC ; 

988 REWD while 
988 SPEC ( 
988 IDEN l                                                 l  
988 OPER < 
988 INTE 50                                                l  
988 SPEC ) 
988 SPEC { 

989 IDEN stringArray                                       l  
989 INTE 2                                                 l  
989 OPER [ 
989 IDEN l                                                 l  
989 OPER ] 
989 OPER = 
989 CHAR    
989 SPEC ; 

990 IDEN l                                                 l  
990 OPER + 
990 OPER + 
990 SPEC ; 

991 SPEC } 

992 IDEN fprintf                                           l  
992 SPEC ( 
992 IDEN Out                                               l  
992 OPER , 
992 STR \n                                                  
992 SPEC ) 
992 SPEC ; 

993 SPEC } 

994 IDEN fclose                                            l  
994 SPEC ( 
994 IDEN In                                                l  
994 SPEC ) 
994 SPEC ; 

995 IDEN fclose                                            l  
995 SPEC ( 
995 IDEN Out                                               l  
995 SPEC ) 
995 SPEC ; 

996 IDEN return                                            l  
996 INTE 0                                                 l  
996 SPEC ; 

997 SPEC } 


